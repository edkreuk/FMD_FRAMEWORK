{
    "workspaces": {
        "workspace_data": "40e27fdc-775a-4ee2-84d5-48893c92d7cc",
        "workspace_code": "2bdaef03-9e79-46da-9b07-391e87b56416",
        "workspace_logging": "7db968e8-e86b-488e-b5ac-ffca009c89d7",
        "workspace_config": "7774469b-0c95-48b9-bc42-a36c8c0e8bca"
    },
    "configuration": {
        "items": [
            {
                "displayName": "SQL_FMD_FRAMEWORK",
                "type": "SQLDatabase",
                "org_id": "075e5656-613d-41f4-89ed-63f6837c0ff6",
                "org_endpoint": "nl7yhqnbrscude3yv6mas6bxpq-tndhi54vbs4urpccunwiydulzi.datawarehouse.fabric.microsoft.com"
            },
            {
                "displayName": "SQL_FMD_FRAMEWORK",
                "type": "SQLEndpoint",
                "org_id": "b6c9a8ce-8888-4dd2-9c3e-ce98279ad8ef"
            }
        ],
        "queries_tables": [
            "\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'integration')\n    BEGIN\n        EXEC('CREATE SCHEMA [integration];');\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'execution')\n    BEGIN\n        EXEC('CREATE SCHEMA [execution];');\n    END\n    ",
            "\n    DECLARE @SQL NVARCHAR(MAX) = '';\n\n    SELECT @SQL = @SQL + 'ALTER TABLE ' + QUOTENAME(s.name) + '.' + QUOTENAME(t.name) + \n    ' DROP CONSTRAINT ' + QUOTENAME(dc.name) + ';' + CHAR(13)\n    FROM sys.default_constraints dc\n    INNER JOIN sys.tables t ON dc.parent_object_id = t.object_id\n    INNER JOIN sys.schemas s ON t.schema_id = s.schema_id\n    WHERE s.name IN ('integration', 'execution');\n\n    EXEC sp_executesql @SQL\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Connection' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Connection](\n            [ConnectionId] [int] IDENTITY(1,1) NOT NULL,\n            [ConnectionGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](200) NOT NULL,\n            [Type] [varchar](50) NOT NULL,\n            [GatewayType] [varchar](50) NULL,\n            [DatasourceReference] [varchar](max) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_ConnectionId')\n    BEGIN\n        ALTER TABLE [integration].[Connection] ADD  CONSTRAINT [PK_integration_ConnectionId] PRIMARY KEY CLUSTERED \n        (\n            [ConnectionId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Connection')\n    BEGIN\n        ALTER TABLE [integration].[Connection] ADD  CONSTRAINT [UC_integration_Connection] UNIQUE NONCLUSTERED \n        (\n            [ConnectionGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    ALTER TABLE [integration].[Connection] ADD  DEFAULT ((1)) FOR [IsActive] \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'DataSource' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[DataSource](\n            [DataSourceId] [int] IDENTITY(1,1) NOT NULL,\n            [ConnectionId] [int] NOT NULL,\n            [Name] [varchar](100) NOT NULL,\n            [Namespace] [varchar](100) NOT NULL,\n            [Type] [varchar](30) NULL,\n            [Description] [nvarchar](200) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_DataSource')\n    BEGIN\n        ALTER TABLE [integration].[DataSource] ADD  CONSTRAINT [PK_integration_DataSource] PRIMARY KEY CLUSTERED \n        (\n            [DataSourceId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_DataSource')\n    BEGIN\n        ALTER TABLE [integration].[DataSource] ADD  CONSTRAINT [UC_integration_DataSource] UNIQUE NONCLUSTERED \n        (\n            [ConnectionId] ASC,\n            [Name] ASC,\n            [Type] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[DataSource] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Workspace' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Workspace](\n            [WorkspaceId] [int] IDENTITY(1,1) NOT NULL,\n            [WorkspaceGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](100) NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_Workspace')\n    BEGIN\n        ALTER TABLE [integration].[Workspace] ADD  CONSTRAINT [PK_integration_Workspace] PRIMARY KEY CLUSTERED \n        (\n            [WorkspaceId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Workspace_WorkspaceGuid')\n    BEGIN\n        ALTER TABLE [integration].[Workspace] ADD  CONSTRAINT [UC_integration_Workspace_WorkspaceGuid] UNIQUE NONCLUSTERED \n        (\n            [WorkspaceGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Pipeline' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Pipeline](\n            [PipelineId] [int] IDENTITY(1,1) NOT NULL,\n            [PipelineGuid] [uniqueidentifier] NOT NULL,\n            [WorkspaceGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](200) NOT NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_PipelineId')\n    BEGIN\n        ALTER TABLE [integration].[Pipeline] ADD  CONSTRAINT [PK_integration_PipelineId] PRIMARY KEY CLUSTERED \n        (\n            [PipelineId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Pipeline')\n    BEGIN\n        ALTER TABLE [integration].[Pipeline] ADD  CONSTRAINT [UC_integration_Pipeline] UNIQUE NONCLUSTERED \n        (\n            [PipelineGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[Pipeline] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Lakehouse' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Lakehouse](\n            [LakehouseId] [int] IDENTITY(1,1) NOT NULL,\n            [LakehouseGuid] [uniqueidentifier] NOT NULL,\n            [WorkspaceGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](100) NOT NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_Lakehouse')\n    BEGIN\n        ALTER TABLE [integration].[Lakehouse] ADD  CONSTRAINT [PK_integration_Lakehouse] PRIMARY KEY CLUSTERED \n        (\n            [LakehouseId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Lakehouse')\n    BEGIN\n        ALTER TABLE [integration].[Lakehouse] ADD  CONSTRAINT [UC_integration_Lakehouse] UNIQUE NONCLUSTERED \n        (\n            [LakehouseGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[Lakehouse] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'F' AND name = 'FK_Lakehouse_Workspace')\n    BEGIN\n        ALTER TABLE [integration].[Lakehouse]  WITH CHECK ADD  CONSTRAINT [FK_Lakehouse_Workspace] FOREIGN KEY([WorkspaceGuid])\n        REFERENCES [integration].[Workspace] ([WorkspaceGuid])\n    END\n    ",
            "\n        ALTER TABLE [integration].[Lakehouse] CHECK CONSTRAINT [FK_Lakehouse_Workspace]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'LandingzoneEntity' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[LandingzoneEntity](\n            [LandingzoneEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [DataSourceId] [int] NOT NULL,\n            [LakehouseId] [int] NOT NULL,\n            [SourceSchema] [nvarchar](100) NULL,\n            [SourceName] [nvarchar](200) NOT NULL,\n            [SourceCustomSelect] [nvarchar](4000) NULL,\n            [FileName] [nvarchar](200) NOT NULL,\n            [FileType] [nvarchar](20) NOT NULL,\n            [FilePath] [nvarchar](500) NOT NULL,\n            [IsIncremental] [bit] NOT NULL,\n            [IsIncrementalColumn] [nvarchar](50) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_LandingzoneEntity')\n    BEGIN\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  CONSTRAINT [PK_integration_LandingzoneEntity] PRIMARY KEY CLUSTERED \n        (\n            [LandingzoneEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_LandingzoneEntity')\n    BEGIN\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  CONSTRAINT [UC_integration_LandingzoneEntity] UNIQUE NONCLUSTERED \n        (\n            [SourceSchema] ASC,\n            [SourceName] ASC,\n            [DataSourceId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  DEFAULT ((0)) FOR [IsIncremental]\n    ",
            "\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'BronzeLayerEntity' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[BronzeLayerEntity](\n            [BronzeLayerEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [LandingzoneEntityId] [bigint] NOT NULL,\n            [LakehouseId] [int] NOT NULL,\n            [Schema] [nvarchar](100) NOT NULL,\n            [Name] [nvarchar](200) NOT NULL,\n            [PrimaryKeys] [nvarchar](200) NOT NULL,\n            [FileType] [nvarchar](20) NOT NULL,\n            [CleansingRules] [nvarchar](max) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n    END \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_BronzeLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  CONSTRAINT [PK_integration_BronzeLayerEntity] PRIMARY KEY CLUSTERED \n        (\n            [BronzeLayerEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_BronzeLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  CONSTRAINT [UC_integration_BronzeLayerEntity] UNIQUE NONCLUSTERED \n        (\n            [LakehouseId] ASC,\n            [Schema] ASC,\n            [Name] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  DEFAULT ('Delta') FOR [FileType]\n    ",
            "\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'F' AND name = 'FK_BronzeLayerEntity_LandingzoneEntity')\n    BEGIN\n        ALTER TABLE [integration].[BronzeLayerEntity]  WITH CHECK ADD  CONSTRAINT [FK_BronzeLayerEntity_LandingzoneEntity] FOREIGN KEY([LandingzoneEntityId])\n        REFERENCES [integration].[LandingzoneEntity] ([LandingzoneEntityId])\n    END\n    ",
            "\n        ALTER TABLE [integration].[BronzeLayerEntity] CHECK CONSTRAINT [FK_BronzeLayerEntity_LandingzoneEntity]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'SilverLayerEntity' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[SilverLayerEntity](\n            [SilverLayerEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [BronzeLayerEntityId] [bigint] NOT NULL,\n            [LakehouseId] [int] NOT NULL,\n            [Schema] [nvarchar](100) NULL,\n            [Name] [nvarchar](200) NULL,\n            [FileType] [nvarchar](20) NOT NULL,\n            [CleansingRules] [nvarchar](max) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_SilverLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  CONSTRAINT [PK_integration_SilverLayerEntity] PRIMARY KEY CLUSTERED \n        (\n            [SilverLayerEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_BSilverLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  CONSTRAINT [UC_integration_BSilverLayerEntity] UNIQUE NONCLUSTERED \n        (\n            [LakehouseId] ASC,\n            [Schema] ASC,\n            [Name] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  DEFAULT ('Delta') FOR [FileType]\n    ",
            "\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'F' AND name = 'FK_SilverLayerEntity_BronzeLayerEntityId')\n    BEGIN\n        ALTER TABLE [integration].[SilverLayerEntity]  WITH CHECK ADD  CONSTRAINT [FK_SilverLayerEntity_BronzeLayerEntityId] FOREIGN KEY([BronzeLayerEntityId])\n        REFERENCES [integration].[BronzeLayerEntity] ([BronzeLayerEntityId])\n    END\n    ",
            "\n        ALTER TABLE [integration].[SilverLayerEntity] CHECK CONSTRAINT [FK_SilverLayerEntity_BronzeLayerEntityId]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'LandingzoneEntityLastLoadValue' AND schema_id = SCHEMA_ID('execution'))\n    BEGIN\n        CREATE TABLE [execution].[LandingzoneEntityLastLoadValue](\n            [LandingzoneEntityValueId] [bigint] IDENTITY(1,1) NOT NULL,\n            [LandingzoneEntityId] [bigint] NULL,\n            [LoadValue] [varchar](50) NULL,\n            [LastLoadDatetime] [datetime2](7) NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_execution_Source_LastLoadValue')\n    BEGIN\n        ALTER TABLE [execution].[LandingzoneEntityLastLoadValue] ADD  CONSTRAINT [PK_execution_Source_LastLoadValue] PRIMARY KEY CLUSTERED \n        (\n            [LandingzoneEntityValueId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_execution_LandingzoneEntityLastLoadValue_Guid')\n    BEGIN\n        ALTER TABLE [execution].[LandingzoneEntityLastLoadValue] ADD  CONSTRAINT [UC_execution_LandingzoneEntityLastLoadValue_Guid] UNIQUE NONCLUSTERED \n        (\n            [LandingzoneEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'PipelineLandingzoneEntity' AND schema_id = SCHEMA_ID('execution'))\n    BEGIN\n        CREATE TABLE [execution].[PipelineLandingzoneEntity](\n            [PipelineLandingzoneEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [LandingzoneEntityId] [bigint] NOT NULL,\n            [FilePath] [nvarchar](300) NOT NULL,\n            [FileName] [nvarchar](max) NOT NULL,\n            [InsertDateTime] [datetime] NULL,\n            [IsProcessed] [bit] NOT NULL,\n            [LoadEndDateTime] [datetime] NULL\n        ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_execution_PipelineLandingzoneEntity')\n    BEGIN\n        ALTER TABLE [execution].[PipelineLandingzoneEntity] ADD  CONSTRAINT [PK_execution_PipelineLandingzoneEntity] PRIMARY KEY CLUSTERED \n        (\n            [PipelineLandingzoneEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    "
        ],
        "queries_views": [
            "\n    CREATE or ALTER   VIEW [execution].[vw_LoadSourceToLandingzone]\n    AS\n\n    SELECT \n    LZE.[LandingzoneEntityId] AS [EntityId],\n    DS.[DataSourceId] AS [DataSourceId],\n    DS.[Name] AS [DataSourceName],\n    DS.[Namespace] AS [DataSourceNamespace],\n    DS.[Type] AS [DataSourceType],\n    C.[Type] AS [ConnectionType],\n    C.[ConnectionGuid] AS [ConnectionGuid],\n    [SourceSchema],\n    [SourceName],\n    [FilePath] + '/' + DS.[Namespace] + FORMAT(GETUTCDATE(), '/yyyy/MM/dd') AS [TargetFilePath],\n    LZE.[FileName] + '_' + FORMAT(GETUTCDATE(), 'yyyyMMddHHmm') + '.' + [FileType] AS [TargetFileName],\n    LZE.[FileType] AS [TargetFileType],\n    LH.[LakehouseGuid] AS [TargetLakehouseGuid],\n    W.[WorkspaceGuid] AS [WorkspaceGuid],\n    [IsIncremental],\n    [IsIncrementalColumn],\n    [LastLoadValue] = CASE\n        WHEN C.[Type] IN ('SQL') THEN\n            'SELECT CASE WHEN ' + CONVERT(NVARCHAR(1), CASE WHEN LZE.[IsIncremental] = '' OR ISNULL(LZE.[IsIncrementalColumn], '') = '' THEN 0 ELSE LZE.[IsIncremental] END) + ' = 1 \n            THEN CONVERT(VARCHAR, MAX(' + (\n                CASE WHEN ISNULL(LZE.[IsIncrementalColumn], '') = '' THEN '1'\n                ELSE LZE.[IsIncrementalColumn]\n            END) + '), 120) \n            ELSE CONVERT(VARCHAR, GETDATE(), 120) \n            END AS [LastLoadValue] \n            FROM ' + QUOTENAME(ISNULL(\n                CASE WHEN LZE.[SourceSchema] != '' THEN LZE.[SourceSchema]\n                END, 'Unknown')) + '.' + QUOTENAME(LZE.[SourceName])\n        ELSE \n            LZELV.[LoadValue]\n    END,\n    [SourceDataRetrieval] = CASE \n        WHEN LZE.[IsIncremental] = 1 THEN \n            'SELECT * FROM ' + QUOTENAME(ISNULL(CASE WHEN LZE.[SourceSchema] != '' THEN LZE.[SourceSchema] END, 'Unknown')) + '.' + QUOTENAME(LZE.[SourceName]) + \n            CASE WHEN ISNULL(LZE.[IsIncrementalColumn], '') <> '' AND TRY_CONVERT(VARCHAR, [LoadValue]) IS NOT NULL THEN \n                ' WHERE ' + LZE.[IsIncrementalColumn] + ' >= ''' + TRY_CONVERT(VARCHAR, ISNULL([LoadValue], '1900-01-01')) + '''' \n            ELSE ''\n            END\n        WHEN ISNULL(LZE.[IsIncremental], 0) = 0 THEN CASE when [SourceCustomSelect]<>'' then [SourceCustomSelect] else \n            'SELECT * FROM ' + QUOTENAME(ISNULL(CASE WHEN LZE.[SourceSchema] != '' THEN LZE.[SourceSchema] END, 'Unknown')) + '.' + QUOTENAME(LZE.[SourceName]) end\n        ELSE ''\n    END\nFROM [integration].[LandingzoneEntity] LZE\nINNER JOIN [integration].[Lakehouse] LH\n    ON LZE.[LakehouseId] = LH.[LakehouseId]\nINNER JOIN [integration].[Workspace] W\n    ON W.[WorkspaceGuid] = LH.[WorkspaceGuid]\nINNER JOIN [integration].[DataSource] DS\n    ON DS.[DataSourceId] = LZE.[DataSourceId]\nINNER JOIN [integration].[Connection] C\n    ON DS.[ConnectionId] = C.[ConnectionId]\nLEFT JOIN [execution].[LandingzoneEntityLastLoadValue] LZELV\n    ON LZELV.[LandingzoneEntityId] = LZE.[LandingzoneEntityId]\nWHERE 1 = 1\n    AND LZE.[IsActive] = 1\n    \n",
            "\n\n    CREATE or ALTER   VIEW [execution].[vw_LoadToBronzeLayer]\n    AS\n    SELECT \n    BLE.[BronzeLayerEntityId], \n    PLZE.[FilePath] AS SourceFilePath,\n    PLZE.[FileName] AS SourceFileName,\n    LZE.[LandingzoneEntityId] AS [EntityId],\n    LZE.[FileType] AS SourceFileType,\n    BLE.[Schema] AS [TargetSchema],\n    BLE.[Name] AS [TargetName],\n    WT.[WorkspaceGuid] AS [TargetWorkspaceId],\n    WS.[WorkspaceGuid] AS [SourceWorkspaceId],\n    BLH.[LakehouseGuid] AS [TargetLakehouseId],\n    LZH.[LakehouseGuid] AS [SourceLakehouseId],\n    BLH.[Name] AS [TargetLakehouseName],\n    LZH.[Name] AS [SourceLakehouseName],\n    LZE.[IsIncremental],\n    BLE.[PrimaryKeys],\n    BLE.[CleansingRules],\n    DS.[Namespace] AS [DataSourceNamespace]\nFROM [integration].[BronzeLayerEntity] BLE\nINNER JOIN [integration].[LandingzoneEntity] LZE\n    ON LZE.[LandingzoneEntityId] = BLE.[LandingzoneEntityId]\nINNER JOIN [execution].[PipelineLandingzoneEntity] PLZE\n    ON LZE.[LandingzoneEntityId] = PLZE.[LandingzoneEntityId]\nINNER JOIN [execution].[LandingzoneEntityLastLoadValue] LZELV\n    ON LZE.[LandingzoneEntityId] = LZELV.[LandingzoneEntityId]\nINNER JOIN [integration].[DataSource] DS\n    ON DS.[DataSourceId] = LZE.[DataSourceId]\nINNER JOIN [integration].[Lakehouse] BLH\n    ON BLE.[LakehouseId] = BLH.[LakehouseId]\nINNER JOIN [integration].[Lakehouse] LZH\n    ON LZE.[LakehouseId] = LZH.[LakehouseId]\nINNER JOIN [integration].[Workspace] WT\n    ON WT.[WorkspaceGuid] = BLH.[WorkspaceGuid]\nINNER JOIN [integration].[Workspace] WS\n    ON WS.[WorkspaceGuid] = LZH.[WorkspaceGuid]\nWHERE 1 = 1\n    AND LZE.[IsActive] = 1\n    AND BLE.[IsActive] = 1\n    AND PLZE.[IsProcessed] = 0\n    \n",
            "\n\n    CREATE or ALTER   VIEW [execution].[vw_LoadToSilverLayer]\n    AS\n    SELECT \n    LZE.[LandingzoneEntityId],\n    BLE.[BronzeLayerEntityId],\n    SLE.[SilverLayerEntityId] AS [EntityId],\n    SLE.[Schema] AS [SourceSchema],\n    SLE.[Name] AS [SourceName],\n    BLE.[FileType] AS [SourceFileType],\n    SLE.[Schema] AS [TargetSchema],\n    SLE.[Name] AS [TargetName],\n    SLE.[FileType] AS [TargetFileType],\n    WT.[WorkspaceGuid] AS [TargetWorkspaceId],\n    WS.[WorkspaceGuid] AS [SourceWorkspaceId],\n    SLH.[LakehouseGuid] AS [TargetLakehouseId],\n    BLH.[LakehouseGuid] AS [SourceLakehouseId],\n    SLH.[Name] AS [TargetLakehouseName],\n    BLH.[Name] AS [SourceLakehouseName],\n    SLE.[CleansingRules],\n    DS.[Namespace] AS [DataSourceNamespace]\nFROM [integration].[SilverLayerEntity] SLE\nINNER JOIN [integration].[BronzeLayerEntity] BLE\n    ON SLE.BronzeLayerEntityId = BLE.BronzeLayerEntityId\nINNER JOIN [integration].[LandingzoneEntity] LZE\n    ON LZE.LandingzoneEntityId = BLE.LandingzoneEntityId\nINNER JOIN [execution].[LandingzoneEntityLastLoadValue] LZELV\n    ON LZE.LandingzoneEntityId = LZELV.LandingzoneEntityId\nINNER JOIN [integration].[DataSource] DS\n    ON DS.[DataSourceId] = LZE.[DataSourceId]\nINNER JOIN [integration].[Lakehouse] BLH\n    ON BLE.LakehouseId = BLH.LakehouseId\nINNER JOIN [integration].[Lakehouse] SLH\n    ON SLE.LakehouseId = SLH.LakehouseId\nINNER JOIN [integration].[Workspace] WT\n    ON WT.[WorkspaceGuid] = SLH.[WorkspaceGuid]\nINNER JOIN [integration].[Workspace] WS\n    ON WS.[WorkspaceGuid] = BLH.[WorkspaceGuid]\nWHERE 1 = 1\n    AND LZE.IsActive = 1\n    AND BLE.IsActive = 1\n    AND SLE.IsActive = 1\n    \n"
        ],
        "queries_stored_procedures": [
            "\n\n    CREATE or ALTER  PROCEDURE [execution].[sp_UpsertLandingZoneEntityLastLoadValue] (\n        @LandingzoneEntityId BIGINT,\n        @LastLoadValue VARCHAR(50)\n        )\n        WITH EXECUTE AS CALLER\n    AS\n    BEGIN\n        SET NOCOUNT ON\n                                                                            \n        IF EXISTS (\n                SELECT 1\n                FROM [execution].[LandingzoneEntityLastLoadValue]\n                WHERE [LandingzoneEntityId] = @LandingzoneEntityId\n                )\n        BEGIN\n            UPDATE x\n            SET [LoadValue] = @LastLoadValue,\n                LastLoadDatetime = CONVERT(DATETIME2(7), GETDATE())\n            FROM [execution].[LandingzoneEntityLastLoadValue] x\n            WHERE [LandingzoneEntityId] = @LandingzoneEntityId\n        END                                     \n        ELSE\n        BEGIN\n            INSERT INTO [execution].[LandingzoneEntityLastLoadValue] (\n                [LandingzoneEntityId],\n                [LoadValue],\n                LastLoadDatetime\n                )\n            VALUES (                             \n                @LandingzoneEntityId,\n                @LastLoadValue,\n                getdate()\n                )\n        END\n    --Output for Fabric Pipeline\n    SELECT @LandingzoneEntityId AS LandingzoneEntityId, \n            @LastLoadValue as LastLoadValue;\n        SET NOCOUNT OFF;\n    END\n    \n",
            "\n\n    CREATE or ALTER  PROCEDURE [execution].[sp_UpsertPipelineLandingzoneEntity] (\n        @LandingzoneEntityId BIGINT,\n        @Filename NVARCHAR(300),\n        @FilePath NVARCHAR(300),\n        @IsProcessed BIT\n    )\n    WITH EXECUTE AS CALLER\n    AS\n    BEGIN\n        SET NOCOUNT ON;\n\n        IF NOT EXISTS (\n            SELECT 1\n            FROM [execution].[PipelineLandingzoneEntity] PLE\n            WHERE PLE.[LandingzoneEntityId] = @LandingzoneEntityId\n                AND PLE.[Filename] = @Filename\n                AND PLE.[FilePath] = @FilePath\n        )\n        BEGIN\n            INSERT INTO [execution].[PipelineLandingzoneEntity] (\n                [LandingzoneEntityId],\n                [FilePath],\n                [FileName],\n                [InsertDateTime],\n                [IsProcessed]\n            )\n            SELECT @LandingzoneEntityId,\n                @FilePath,\n                @Filename,\n                GETDATE(),\n                @IsProcessed;\n        END\n        ELSE IF @IsProcessed = 1\n        BEGIN\n            UPDATE [execution].[PipelineLandingzoneEntity]\n            SET [IsProcessed] = @IsProcessed,\n                [LoadEndDateTime] = GETDATE()\n            WHERE [LandingzoneEntityId] = @LandingzoneEntityId\n                AND [Filename] = @Filename\n                AND [FilePath] = @FilePath;\n        END\n\n        -- Output for Fabric Pipeline\n        SELECT @LandingzoneEntityId AS LandingzoneEntityId, \n            @IsProcessed as IsProcessed,\n            @FilePath as FilePath,\n            @Filename as [Filename];\n\n        SET NOCOUNT OFF;\n    END\n    \n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetBronzeLayerEntity](\n         @LandingzoneEntityId int\n       \n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @BronzeLayerEntityId int\n    BEGIN\n     set @BronzeLayerEntityId = ( select isnull(BronzeLayerEntityId,0) as BronzeLayerEntityId from   [integration].[BronzeLayerEntity] where LandingzoneEntityId= @LandingzoneEntityId)\n    END\n\n            SELECT @BronzeLayerEntityId AS BronzeLayerEntityId\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetDataSource](\n       @Name NVARCHAR(100)\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @DataSourceId int\n    BEGIN\n            set @DataSourceId= ( select isnull(DataSourceId,0) as DataSourceId  from   [integration].[DataSource] where  [Name] = @Name)\n    END\n\n            SELECT @DataSourceId AS DataSourceId\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetLakehouse](\n         @WorkspaceGuid UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100)\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @LakehouseId int\n    BEGIN\n        set @LakehouseId= ( select LakehouseId from   [integration].[Lakehouse] where  [Name] = @Name and  [WorkspaceGuid] = @WorkspaceGuid)\n    END\n\n            SELECT @LakehouseId AS LakehouseId\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetLandingzoneEntity](\n         @LakehouseId int\n        ,@SourceSchema NVARCHAR(100)\n        ,@SourceName NVARCHAR(200)\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @LandingzoneEntityId int\n    BEGIN\n          set @LandingzoneEntityId = ( select isnull(LandingzoneEntityId,0) as LandingzoneEntityId  from   [integration].[LandingzoneEntity] where  [SourceName] = @SourceName and  [SourceSchema] = @SourceSchema and [LakehouseId] = @LakehouseId)\n    END\n\n            SELECT @LandingzoneEntityId AS LandingzoneEntityId\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetSilverLayerEntity](\n         @BronzeLayerEntityId int\n       \n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @SilverLayerEntityId int\n    BEGIN\n        set @SilverLayerEntityId = ( select  isnull(SilverLayerEntityId,0) as SilverLayerEntityId from   [integration].[SilverLayerEntity] where BronzeLayerEntityId= @BronzeLayerEntityId)\n    END\n\n            SELECT @SilverLayerEntityId AS SilverLayerEntityId\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_UpsertBronzeLayerEntity](\n        @BronzeLayerEntityId INT = 0\n        ,@LandingzoneEntityId INT\n        ,@Schema NVARCHAR(100) \n        ,@Name NVARCHAR(200)\n        ,@FileType NVARCHAR(20) = 'Delta'\n        ,@LakehouseId INT\n        ,@PrimaryKeys NVARCHAR(200)\n        ,@IsActive BIT = 1)\n    WITH EXECUTE AS CALLER\n    AS \n\n    BEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @OutputTable TABLE (BronzeLayerEntityId INT);\n\n    IF NOT EXISTS(SELECT 1\n                  FROM [integration].[BronzeLayerEntity]\n                  WHERE [BronzeLayerEntityId] = @BronzeLayerEntityId)\n    BEGIN\n        INSERT INTO [integration].[BronzeLayerEntity]\n            ([LandingzoneEntityId]\n            ,[IsActive]\n            ,[Schema]\n            ,[Name]\n            ,[FileType]\n            ,[LakehouseId]\n            ,[PrimaryKeys])\n        OUTPUT INSERTED.[BronzeLayerEntityId] INTO @OutputTable\n        VALUES (@LandingzoneEntityId\n            ,@IsActive\n            ,@Schema\n            ,@Name\n            ,@FileType\n            ,@LakehouseId\n            ,@PrimaryKeys);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[BronzeLayerEntity]\n        SET [LandingzoneEntityId] = @LandingzoneEntityId\n            ,[IsActive] = @IsActive\n            ,[Schema] = @Schema\n            ,[Name] = @Name\n            ,[FileType] = @FileType\n            ,[LakehouseId] = @LakehouseId\n            ,[PrimaryKeys] = @PrimaryKeys\n        OUTPUT INSERTED.[BronzeLayerEntityId] INTO @OutputTable\n        WHERE [BronzeLayerEntityId] = @BronzeLayerEntityId;\n    END\n\n    SELECT BronzeLayerEntityId FROM @OutputTable;\nEND\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_UpsertConnection](\n        @ConnectionGuid UNIQUEIDENTIFIER\n        ,@Name nvarchar(200) \n        ,@Type nvarchar(50) \n        ,@IsActive bit \n\n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Connection]\n                WHERE [ConnectionGuid] = @ConnectionGuid)\n    BEGIN\n        INSERT INTO [integration].[Connection]\n            ([ConnectionGuid]\n            ,[Name]\n            ,[Type]\n            ,[IsActive]\n    )\n        VALUES (\n            @ConnectionGuid\n            ,@Name\n            ,@Type\n            ,@IsActive\n    );\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[Connection]\n        SET [Name] = @Name\n            ,[Type] = @Type\n            ,[IsActive] = @IsActive\n            WHERE [ConnectionGuid] = @ConnectionGuid  \n    END\n    \n",
            "\n    CREATE or ALTER PROCEDURE [integration].[sp_UpsertDataSource](\n        @ConnectionId INT \n        ,@DataSourceId INT = 0\n        ,@Name NVARCHAR(100)\n        ,@Namespace VARCHAR(10)\n        ,@Type VARCHAR(30)\n        ,@Description NVARCHAR(200)\n        ,@IsActive BIT = 1\n    )\n    WITH EXECUTE AS CALLER\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @InternalConnectionId BIGINT;\n    DECLARE @OutputTable TABLE (DataSourceId INT);\n\n    SET @InternalConnectionId = (SELECT [C].[ConnectionId]\n                                 FROM [integration].[Connection] [C]\n                                 WHERE [C].ConnectionId = @ConnectionId);\n\n    IF NOT EXISTS (SELECT 1\n                   FROM [integration].[DataSource]\n                   WHERE [DataSourceId] = @DataSourceId)\n    BEGIN\n        INSERT INTO [integration].[DataSource]\n            ([Name]\n            ,[Namespace]\n            ,[ConnectionId]\n            ,[Type]\n            ,[Description]\n            ,[IsActive])\n        OUTPUT INSERTED.[DataSourceId] INTO @OutputTable\n        VALUES (@Name\n            ,@Namespace\n            ,@InternalConnectionId\n            ,@Type\n            ,@Description\n            ,@IsActive);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[DataSource]\n        SET [Name] = @Name\n            ,[ConnectionId] = @InternalConnectionId\n            ,[Namespace] = @Namespace\n            ,[Type] = @Type\n            ,[Description] = @Description\n            ,[IsActive] = @IsActive\n        OUTPUT INSERTED.[DataSourceId] INTO @OutputTable\n        WHERE [DataSourceId] = @DataSourceId;\n    END\n\n    SELECT DataSourceId FROM @OutputTable;\nEND\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_UpsertLakehouse](\n        @LakehouseId UNIQUEIDENTIFIER\n        ,@WorkspaceId UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100) \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Lakehouse]\n                WHERE [LakehouseGuid] = @LakehouseId)\n    BEGIN\n        INSERT INTO [integration].[Lakehouse]\n            ([Name]\n            ,[LakehouseGuid]\n            ,[WorkspaceGuid])\n        VALUES (@Name\n            ,@LakehouseId\n            ,@WorkspaceId);\n\n    END\n    ELSE\n    BEGIN\n\n        UPDATE [integration].[Lakehouse]\n        SET [Name] = @Name,\n            [WorkspaceGuid] = @WorkspaceId\n        WHERE [LakehouseGuid] = @LakehouseId\n    END\n    \n",
            "\n    CREATE or ALTER PROCEDURE [integration].[sp_UpsertLandingzoneEntity](\n        @LandingzoneEntityId INT = 0\n        ,@DataSourceId INT\n        ,@LakehouseId INT\n        ,@SourceSchema NVARCHAR(100)\n        ,@SourceName NVARCHAR(200)\n\t\t,@SourceCustomSelect NVARCHAR(4000)\n        ,@FileName NVARCHAR(200)\n        ,@FilePath NVARCHAR(100)\n        ,@FileType NVARCHAR(20)\n        ,@IsIncremental bit\n        ,@IsIncrementalColumn NVARCHAR(50) = NULL\n        ,@IsActive BIT = 1\n    )\nWITH EXECUTE AS CALLER\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @OutputTable TABLE (LandingzoneEntityId INT);\n\n    IF NOT EXISTS(SELECT 1\n                  FROM [integration].[LandingzoneEntity]\n                  WHERE [LandingzoneEntityId] = @LandingzoneEntityId)\n    BEGIN\n        INSERT INTO [integration].[LandingzoneEntity]\n            ([DataSourceId]\n            ,[IsActive]\n            ,[SourceSchema]\n            ,[SourceName]\n\t\t\t,[SourceCustomSelect]\n            ,[FileName]\n            ,[FileType]\n            ,[FilePath]\n            ,[LakehouseId]\n            ,[IsIncremental]\n            ,[IsIncrementalColumn])\n        OUTPUT INSERTED.[LandingzoneEntityId] INTO @OutputTable\n        VALUES (@DataSourceId\n            ,@IsActive\n            ,@SourceSchema\n            ,@SourceName\n\t\t\t,@SourceCustomSelect\n            ,@FileName\n            ,@FileType\n            ,@FilePath\n            ,@LakehouseId\n            ,@IsIncremental\n            ,@IsIncrementalColumn);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[LandingzoneEntity]\n        SET [DataSourceId] = @DataSourceId\n            ,[IsActive] = @IsActive\n            ,[SourceSchema] = @SourceSchema\n            ,[SourceName] = @SourceName\n\t\t\t,[SourceCustomSelect] = @SourceCustomSelect\n            ,[FileName] = @FileName\n            ,[FileType] = @FileType\n            ,[FilePath] = @FilePath\n            ,[LakehouseId] = @LakehouseId\n            ,[IsIncremental] = @IsIncremental\n            ,[IsIncrementalColumn] = @IsIncrementalColumn\n        OUTPUT INSERTED.[LandingzoneEntityId] INTO @OutputTable\n        WHERE [LandingzoneEntityId] = @LandingzoneEntityId;\n    END\n\n    SELECT LandingzoneEntityId FROM @OutputTable;\nEND\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_UpsertPipeline](\n        @PipelineId UNIQUEIDENTIFIER\n        ,@WorkspaceId UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100) \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Pipeline]\n                WHERE [PipelineGuid] = @PipelineId)\n    BEGIN\n        INSERT INTO [integration].[Pipeline]\n            ([Name]\n            ,[PipelineGuid]\n            ,[WorkspaceGuid])\n        VALUES (@Name\n            ,@PipelineId\n            ,@WorkspaceId);\n\n    END\n    ELSE\n    BEGIN\n\n        UPDATE [integration].[Pipeline]\n        SET [Name] = @Name,\n            [WorkspaceGuid] = @WorkspaceId\n        WHERE [PipelineGuid] = @PipelineId\n    END\n    \n",
            "\n    CREATE or ALTER PROCEDURE [integration].[sp_UpsertSilverLayerEntity](\n         @SilverLayerEntityId INT = 0 \n        ,@BronzeLayerEntityId INT\n        ,@LakehouseId INT\n        ,@Name NVARCHAR(200)\n        ,@Schema NVARCHAR(100)\n        ,@FileType NVARCHAR(20) = 'Delta'\n        ,@IsActive BIT = 1)\n\nWITH EXECUTE AS CALLER\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @OutputTable TABLE (SilverLayerEntityId INT);\n\n    IF NOT EXISTS(SELECT 1\n                  FROM [integration].[SilverLayerEntity]\n                  WHERE [SilverLayerEntityId] = @SilverLayerEntityId)\n    BEGIN\n        INSERT INTO [integration].[SilverLayerEntity]\n            ([BronzeLayerEntityId]\n            ,[IsActive]\n            ,[Schema]\n            ,[Name]\n            ,[FileType]\n            ,[LakehouseId])\n        OUTPUT INSERTED.[SilverLayerEntityId] INTO @OutputTable\n        VALUES (@BronzeLayerEntityId\n            ,@IsActive\n            ,@Schema\n            ,@Name\n            ,@FileType\n            ,@LakehouseId);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[SilverLayerEntity]\n        SET [BronzeLayerEntityId] = @BronzeLayerEntityId\n            ,[Schema] = @Schema\n            ,[Name] = @Name\n            ,[FileType] = @FileType\n            ,[LakehouseId] = @LakehouseId\n            ,[IsActive] = @IsActive\n        OUTPUT INSERTED.[SilverLayerEntityId] INTO @OutputTable\n        WHERE [SilverLayerEntityId] = @SilverLayerEntityId;\n    END\n\n    SELECT SilverLayerEntityId FROM @OutputTable;\nEND\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_UpsertWorkspace](\n        @WorkspaceId UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100) \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Workspace]\n                WHERE [WorkspaceGuid] = @WorkspaceId)\n    BEGIN\n        INSERT INTO [integration].[Workspace]\n            ([Name]\n            ,[WorkspaceGuid])\n        VALUES (@Name\n            ,@WorkspaceId);\n\n    END\n    ELSE\n    BEGIN\n\n        UPDATE [integration].[Workspace]\n        SET [Name] = @Name\n        WHERE [WorkspaceGuid] = @WorkspaceId\n    END\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_GetConnection](\n       @ConnectionGuid uniqueidentifier\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @ConnectionId int\n    BEGIN\n        set @ConnectionId= ( select isnull(ConnectionId,0) as ConnectionId  from   [integration].[Connection] where [ConnectionGuid] = @ConnectionGuid)\n    END\n\n            SELECT @ConnectionId AS ConnectionId\n",
            "\n    CREATE or ALTER  PROCEDURE [execution].[sp_GetBronzelayerEntity] \n\tWITH EXECUTE AS CALLER\nAS\nBEGIN\n\tSET NOCOUNT ON;\t\n    \n\t\tSELECT CONCAT('[', \n        STRING_AGG(\n        CONCAT(CONVERT(NVARCHAR(MAX),'{\"path\": \"NB_FMD_LOAD_LANDING_BRONZE\", \"params\":{\"SourceFilePath\": ')  , '\"' , REPLACE(REPLACE([SourceFilePath],'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceFileName\" : ', '\"', REPLACE(REPLACE([SourceFileName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"TargetSchema\"   : ', '\"', REPLACE(REPLACE([TargetSchema], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"TargetName\"     : ', '\"', REPLACE(REPLACE([TargetName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"PrimaryKeys\"    : ', '\"', REPLACE(REPLACE([PrimaryKeys], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"SourceFileType\" : ', '\"', REPLACE(REPLACE([SourceFileType], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"IsIncremental\"  : ', '\"', CASE WHEN [IsIncremental] = 1 THEN 'True' ELSE 'False' END, '\"',\n        ',\"TargetLakehouse\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [TargetLakehouseId])), '\"',\n        ',\"SourceLakehouse\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [SourceLakehouseId])), '\"',\n        ',\"TargetWorkspace\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [TargetWorkspaceId])), '\"',\n        ',\"SourceWorkspace\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [SourceWorkspaceId])), '\"',\n        ',\"TargetLakehouseName\" : ', '\"', REPLACE(REPLACE([TargetLakehouseName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"SourceLakehouseName\" : ', '\"', REPLACE(REPLACE([SourceLakehouseName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"LandingzoneEntityId\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [EntityId])), '\"',\n\t\t',\"DataSourceNamespace\" : ' , '\"' ,  LOWER(convert(NVARCHAR(20), [DataSourceNamespace])) , '\"' ,\n        ',\"cleansing_rules\" : ', '\"', REPLACE(REPLACE([CleansingRules], '\\', '\\'), '\"', '\"'), '\"', \n        '}}'),', ') WITHIN GROUP (ORDER BY [EntityId])\n        ,']') AS NotebookParams\n         FROM (SELECT TOP 100 PERCENT * FROM [execution].[vw_LoadToBronzeLayer]  ORDER BY [SourceFileName] ASC) AS [vw_LoadToBronzeLayer]\n               \nEND\n",
            "\n\nCREATE or ALTER   PROCEDURE [execution].[sp_GetSilverlayerEntity] \n\tWITH EXECUTE AS CALLER\nAS\nBEGIN\n\tSET NOCOUNT ON;\t\n    \nSELECT CONCAT('[',\n    STRING_AGG(\n        CONCAT(CONVERT(NVARCHAR(MAX),'{\"path\": \"NB_FMD_LOAD_BRONZE_SILVER\", \"params\": {\"SourceSchema\": ') , '\"' , REPLACE(REPLACE(SourceSchema,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceName\": ' , '\"' , REPLACE(REPLACE(SourceName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"TargetSchema\": ' , '\"' , REPLACE(REPLACE(TargetSchema,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"TargetName\": ' , '\"' , REPLACE(REPLACE(TargetName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceFileType\": ' , '\"' , REPLACE(REPLACE(SourceFileType,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"TargetLakehouse\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), TargetLakehouseId)) , '\"' ,\n        ',\"SourceLakehouse\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), SourceLakehouseId)) , '\"' ,\n        ',\"TargetWorkspace\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), TargetWorkspaceId)) , '\"' ,\n        ',\"SourceWorkspace\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), SourceWorkspaceId)) , '\"' ,\n        ',\"TargetLakehouseName\": ' , '\"' , REPLACE(REPLACE(TargetLakehouseName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceLakehouseName\": ' , '\"' , REPLACE(REPLACE(SourceLakehouseName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SilverLayerEntityId\": ' , '\"' ,  LOWER(CONVERT(NVARCHAR(36),EntityId)) , '\"' ,\n        ',\"DataSourceNamespace\" : ' , '\"' ,  LOWER(convert(NVARCHAR(30), [DataSourceNamespace])) , '\"' ,\n        ',\"cleansing_rules\" : ', '\"', REPLACE(REPLACE([CleansingRules], '\\', '\\'), '\"', '\"'), '\"', \n              '}}' )\n    , ',') WITHIN GROUP (ORDER BY EntityId)\n    ,']') AS NotebookParams\nFROM [execution].[vw_LoadToSilverLayer]\n             \nEND\n"
        ]
    },
    "logging": {
        "items": [
            {
                "displayName": "WH_LOG",
                "type": "Warehouse",
                "org_id": "bebda8eb-0b5f-41e9-933b-1cfc1df648f4",
                "org_endpoint": "nl7yhqnbrscude3yv6mas6bxpq-5buls7ll5chernnm77fabhej24.datawarehouse.fabric.microsoft.com"
            }
        ],
        "queries": [
            "\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'logging')\n    BEGIN\n        EXEC('CREATE SCHEMA [logging];');\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'PipelineExecution' AND schema_id = SCHEMA_ID('logging'))\n    BEGIN\n        CREATE TABLE [logging].[PipelineExecution]\n        (\n            [WorkspaceGuid] [uniqueidentifier]  NULL,\n            [PipelineRunGuid] [uniqueidentifier]  NULL,\n            [PipelineParentRunGuid] [uniqueidentifier]  NULL,\n            [PipelineGuid] [uniqueidentifier]  NULL,\n            [PipelineName] [varchar](100)  NULL,\n            [PipelineParameters] [varchar](8000)  NULL,\n            [TriggerType] [varchar](50)  NULL,\n            [TriggerGuid] [uniqueidentifier]  NULL,\n            [TriggerTime] [datetime2](6)  NULL,\n            [LogType] [varchar](50)  NULL,\n            [LogDateTime] [datetime2](6)  NULL,\n            [LogData] [varchar](8000)  NULL\n        )\n    END\n    ",
            "\n    CREATE OR ALTER PROCEDURE [logging].[sp_AuditPipeline]\n        @PipelineGuid UNIQUEIDENTIFIER\t\t\t\t= NULL\n        ,@PipelineName VARCHAR(100)\t\t\t\t    = NULL\n        ,@PipelineRunGuid UNIQUEIDENTIFIER\t\t\t= NULL\n        ,@PipelineParentRunGuid UNIQUEIDENTIFIER\t= NULL\n        ,@PipelineParameters VARCHAR(8000)  \t    = NULL\n        ,@TriggerType VARCHAR(50)\t\t\t\t\t= NULL\n        ,@TriggerGuid UNIQUEIDENTIFIER\t\t\t\t= NULL\n        ,@TriggerTime datetime\t\t\t\t\t\t= NULL\n        ,@LogData VARCHAR(8000)                     = NULL\n        ,@LogType\tvarchar(50)\t\t\t\t\t\t--Choice between Start/End/Fail, based on this Type the correct execution will be done\n        ,@WorkspaceGuid UNIQUEIDENTIFIER\t\t    = NULL\n\n    AS\n        INSERT INTO [logging].[PipelineExecution]\n            ([PipelineRunGuid]\n            ,[PipelineParentRunGuid]\n            ,[PipelineGuid]\n            ,[PipelineName]\n            ,[PipelineParameters]\n            ,[TriggerType]\n            ,[TriggerGuid]\n            ,[TriggerTime]\n            ,[LogDateTime]\n            ,[LogType]\n            ,[LogData]\n            ,[WorkspaceGuid]\n        )VALUES (\n            @PipelineRunGuid,\n            @PipelineParentRunGuid,\n            @PipelineGuid,\n            @PipelineName,\n            @PipelineParameters,\n            @TriggerType,\n            @TriggerGuid,\n            @TriggerTime,\n            getdate(),\n            @LogType,\n            @LogData,\n            @WorkspaceGuid\n            )\n    "
        ]
    },
    "connections": {
        "CON_FMD_FABRIC_SQL": "372237f9-709a-48f8-8fb2-ce06940c990e",
        "CON_FMD_FABRIC_PIPELINES": "6d8146c6-a438-47df-94e2-540c552eb6d7",
        "CON_FMD_ASQL_01": "cf673e6a-13f6-4ebb-9cbb-4ba4ab390818",
        "CON_FMD_ASQL_02": "11a8e5fe-fbca-4822-9ba4-9162cf56e6dd",
        "CON_FMD_ADLS_01": "a0581b6e-5e38-46eb-bab2-7f08e9a35c30",
        "CON_FMD_ADF_PIPELINES": "02e107b8-e97e-4b00-a28c-668cf9ce3d9a"
    },
    "data": [
        {
            "displayName": "LH_DATA_LANDINGZONE",
            "type": "Lakehouse",
            "org_id": "01b832e3-2746-4e9c-b169-540b2741a638"
        },
        {
            "displayName": "LH_BRONZE_LAYER",
            "type": "Lakehouse",
            "org_id": "5b2306b4-122c-4269-b41f-b77aef342f48"
        },
        {
            "displayName": "LH_SILVER_LAYER",
            "type": "Lakehouse",
            "org_id": "50d7d4c9-7db0-4d4d-a324-31e18b536fe4"
        }
    ],
    "items": [
        {
            "displayName": "ENV_FMD",
            "type": "Environment",
            "org_id": "4c613d65-f566-4bf3-83be-7d8c773793cd"
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "notebook-content.py",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIk5vdGVib29rIiwKICAgICJkaXNwbGF5TmFtZSI6ICJOQl9GTURfTE9BRF9CUk9OWkVfU0lMVkVSIgogIH0sCiAgImNvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMCIsCiAgICAibG9naWNhbElkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKICB9Cn0=",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "NB_FMD_LOAD_BRONZE_SILVER",
            "type": "Notebook",
            "org_id": "fded3415-29e4-43f6-914b-ce2928fec8f2",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "notebook-content.py",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIk5vdGVib29rIiwKICAgICJkaXNwbGF5TmFtZSI6ICJOQl9GTURfTE9BRF9MQU5ESU5HX0JST05aRSIsCiAgICAiZGVzY3JpcHRpb24iOiAiTmV3IG5vdGVib29rIgogIH0sCiAgImNvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMCIsCiAgICAibG9naWNhbElkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKICB9Cn0=",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "NB_FMD_LOAD_LANDING_BRONZE",
            "type": "Notebook",
            "org_id": "30691233-7ff5-43e6-89ed-70735657497f",
            "description": "New notebook"
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xPQURfTEFORElOR1pPTkUiCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgogIH0KfQ==",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LOAD_LANDINGZONE",
            "type": "DataPipeline",
            "org_id": "32340cba-40f9-472a-95f8-129cd616245c",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xPQURfQUxMIgogIH0sCiAgImNvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMCIsCiAgICAibG9naWNhbElkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKICB9Cn0=",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LOAD_ALL",
            "type": "DataPipeline",
            "org_id": "13b06c52-4379-4a77-8b75-a961d4a3ca9f",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xPQURfQlJPTlpFIgogIH0sCiAgImNvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMCIsCiAgICAibG9naWNhbElkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKICB9Cn0=",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LOAD_BRONZE",
            "type": "DataPipeline",
            "org_id": "87a05abe-56c2-41cf-8bcc-94f56eda470e",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xPQURfU0lMVkVSIgogIH0sCiAgImNvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMCIsCiAgICAibG9naWNhbElkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKICB9Cn0=",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LOAD_SILVER",
            "type": "DataPipeline",
            "org_id": "cae8cb5e-8f5b-47e0-8873-84622ce8b9f7",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT1BZX0ZST01fQVNRTF8wMSIKICB9LAogICJjb25maWciOiB7CiAgICAidmVyc2lvbiI6ICIyLjAiLAogICAgImxvZ2ljYWxJZCI6ICIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiCiAgfQp9",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COPY_FROM_ASQL_01",
            "type": "DataPipeline",
            "org_id": "5af73130-221b-4b66-8830-5bc1ca7adc8e",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT1BZX0ZST01fT05FTEFLRV9UQUJMRVNfMDEiCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgogIH0KfQ==",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COPY_FROM_ONELAKE_TABLES_01",
            "type": "DataPipeline",
            "org_id": "24f8ba86-5f30-46ee-b368-7a2eb080bd91",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT1BZX0ZST01fQURMU18wMSIKICB9LAogICJjb25maWciOiB7CiAgICAidmVyc2lvbiI6ICIyLjAiLAogICAgImxvZ2ljYWxJZCI6ICIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiCiAgfQp9",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COPY_FROM_ADLS_01",
            "type": "DataPipeline",
            "org_id": "80814791-2205-4a64-9aba-d42b21a3b3cb",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT1BZX0ZST01fQVNRTF8wMiIKICB9LAogICJjb25maWciOiB7CiAgICAidmVyc2lvbiI6ICIyLjAiLAogICAgImxvZ2ljYWxJZCI6ICIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiCiAgfQp9",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COPY_FROM_ASQL_02",
            "type": "DataPipeline",
            "org_id": "1b441aa7-46fc-48e1-8cae-05347903c77b",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT01NQU5EX0FTUUwiCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgogIH0KfQ==",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COMMAND_ASQL",
            "type": "DataPipeline",
            "org_id": "c09f1aac-9d27-4aca-a70d-0c3498b888d6",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT01NQU5EX0FETFMiCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgogIH0KfQ==",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COMMAND_ADLS",
            "type": "DataPipeline",
            "org_id": "a3d8ff64-5342-4974-a1b0-e974202d6e34",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT01NQU5EX09ORUxBS0UiCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgogIH0KfQ==",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COMMAND_ONELAKE",
            "type": "DataPipeline",
            "org_id": "07a17155-b31d-400a-9673-8be9de1a41d9",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT1BZX0ZST01fQURGIgogIH0sCiAgImNvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMCIsCiAgICAibG9naWNhbElkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKICB9Cn0=",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COPY_FROM_ADF",
            "type": "DataPipeline",
            "org_id": "7c30da1b-5c3b-4001-88b7-7e737de3d4e4",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT01NQU5EX0FERiIKICB9LAogICJjb25maWciOiB7CiAgICAidmVyc2lvbiI6ICIyLjAiLAogICAgImxvZ2ljYWxJZCI6ICIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiCiAgfQp9",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COMMAND_ADF",
            "type": "DataPipeline",
            "org_id": "b5447fc1-685d-42f9-a2bd-23ebd5e5cadc",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "notebook-content.py",
                        "payload": "IyBGYWJyaWMgbm90ZWJvb2sgc291cmNlCgojIE1FVEFEQVRBICoqKioqKioqKioqKioqKioqKioqCgojIE1FVEEgewojIE1FVEEgICAia2VybmVsX2luZm8iOiB7CiMgTUVUQSAgICAgIm5hbWUiOiAic3luYXBzZV9weXNwYXJrIgojIE1FVEEgICB9LAojIE1FVEEgICAiZGVwZW5kZW5jaWVzIjogewojIE1FVEEgICAgICJsYWtlaG91c2UiOiB7CiMgTUVUQSAgICAgICAiZGVmYXVsdF9sYWtlaG91c2VfbmFtZSI6ICIiLAojIE1FVEEgICAgICAgImRlZmF1bHRfbGFrZWhvdXNlX3dvcmtzcGFjZV9pZCI6ICIiCiMgTUVUQSAgICAgfQojIE1FVEEgICB9CiMgTUVUQSB9CgojIE1BUktET1dOICoqKioqKioqKioqKioqKioqKioqCgojIGZ1bmN0aW9uYW1lICMgRGF0YSBjbGVhbnNpbmcgZnVuY3Rpb25zCiMgCiMgSXQgaXMgcG9zc2libGUgdG8gcGVyZm9ybSBjbGVhbnNpbmcgZnVuY3Rpb25zIG9uIGluY29taW5nIGRhdGEuIEZvciBleGFtcGxlLCBjb252ZXJ0aW5nIGFsbCB0ZXh0IGluIGEgY29sdW1uIHRvIHVwcGVyY2FzZS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgZGVmaW5pbmcgY2xlYW5zaW5nIHJ1bGVzIGZvciBhIHRhYmxlLiBUaGUgY2xlYW5zaW5nX3J1bGVzIGNvbnRhaW5zIGEgcGllY2Ugb2YgSlNPTiBhcyBzaG93biBiZWxvdy4gVGhpcyBpcyBhbiBhcnJheSBvZiBvbmUgb3IgbW9yZSBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNhbGxlZC4KIyAKIyAtIGZ1bmN0aW9uOiBuYW1lIG9mIHRoZSBmdW5jdGlvbgojIC0gY29sdW1uczogc2VtaS1jb2xvbiBzZXBhcmF0ZWQgbGlzdCBvZiBjb2x1bW5zIHRvIHdoaWNoIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgYXBwbGllZAojIC0gcGFyYW1ldGVyczogSlNPTiBzdHJpbmcgd2l0aCB0aGUgZGlmZmVyZW50IHBhcmFtZXRlcnMgYW5kIHRoZWlyIHZhbHVlcwojIAojIEV4YW1wbGU6CiMgCiMgYGBgCiMgWwojICAgIHsiZnVuY3Rpb24iOiAidG9fdXBwZXIiLAojICAgICAiY29sdW1ucyI6ICJUcmFuc2FjdGlvblR5cGVOYW1lIn0sIAojICAgIHsiZnVuY3Rpb24iOiAiY3VzdG9tX2Z1bmN0aW9uX3dpdGhfcGFyYW1zIiwKIyAgICAgImNvbHVtbnMiOiAiVHJhbnNhY3Rpb25UeXBlTmFtZTtMYXN0RWRpdGVkQnkiLAojICAgICAicGFyYW1ldGVycyI6IHsicGFyYW0xIiA6ICJhYmMiLCAicGFyYW0yIiA6ICIxMjMifX0KIyBdCiMgYGBgCiMgCiMgIyMgQ3VzdG9tIGZ1bmN0aW9ucwojIAojIEN1c3RvbSBmdW5jdGlvbnMgY2FuIGJlIGFkZGVkIHRvIHRoZSBzZWN0aW9uIGJlbGxvdy4gVGhlIGZ1bmN0aW9uIGhhcyB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZS4KIyAKIyBgYGAKIyBkZWYgPGZ1bmN0aW9uYW1lPiAoZGYsIGNvbHVtbnMsIGFyZ3MpOgojIAojICAgICBwcmludChhcmdzWyc8Y3VzdG9tIHBhcmFtZXRlciBuYW1lPiddKSAjIHVzZSBvZiBjdXN0b20gcGFyYW1ldGVycwojIAojICAgICBmb3IgY29sdW1uIGluIGNvbHVtbnM6ICMgYXBwbHkgZnVuY3Rpb24gZm9yZWFjaCBjb2x1bW4KIyAgICAgICAgIGRmID0gZGYuPGN1c3RvbSBsb2dpYz4KIyAKIyAgICAgcmV0dXJuIGRmICNhbHdheXMgcmV0dXJuIGRhdGFmcmFtZS4KIyBgYGAKIyAKCgojIFBBUkFNRVRFUlMgQ0VMTCAqKioqKioqKioqKioqKioqKioqKgoKIyBkZWZpbmUgcGFyYW1ldGVycwojIGNsZWFuc2luZ19ydWxlcyA9ICJbe1wiZnVuY3Rpb25cIjogXCJ0b19sb3dlclwiLCBcImNvbHVtbnNcIiA6IFwiQ2l0eVwiLCBcInBhcmFtZXRlcnNcIiA6IFwiXCJ9LCB7XCJmdW5jdGlvblwiOiBcInRvX3VwcGVyXCIsIFwiY29sdW1uc1wiIDogXCJDb3VudHJ5XCIsIFwicGFyYW1ldGVyc1wiIDogXCJcIn1dIgoKIyBNRVRBREFUQSAqKioqKioqKioqKioqKioqKioqKgoKIyBNRVRBIHsKIyBNRVRBICAgImxhbmd1YWdlIjogInB5dGhvbiIsCiMgTUVUQSAgICJsYW5ndWFnZV9ncm91cCI6ICJzeW5hcHNlX3B5c3BhcmsiCiMgTUVUQSB9CgojIENFTEwgKioqKioqKioqKioqKioqKioqKioKCmZyb20gcHlzcGFyay5zcWwgaW1wb3J0IERhdGFGcmFtZQppbXBvcnQganNvbgppbXBvcnQgcmUKZnJvbSBkZWx0YS50YWJsZXMgaW1wb3J0IERlbHRhVGFibGUKCiMgTUVUQURBVEEgKioqKioqKioqKioqKioqKioqKioKCiMgTUVUQSB7CiMgTUVUQSAgICJsYW5ndWFnZSI6ICJweXRob24iLAojIE1FVEEgICAibGFuZ3VhZ2VfZ3JvdXAiOiAic3luYXBzZV9weXNwYXJrIgojIE1FVEEgfQoKIyBDRUxMICoqKioqKioqKioqKioqKioqKioqCgppZiB0eXBlKGNsZWFuc2luZ19ydWxlcykgaXMgc3RyOgogICAgY2xlYW5zaW5nX3J1bGVzID0ganNvbi5sb2FkcyhjbGVhbnNpbmdfcnVsZXMpCgojIE1FVEFEQVRBICoqKioqKioqKioqKioqKioqKioqCgojIE1FVEEgewojIE1FVEEgICAibGFuZ3VhZ2UiOiAicHl0aG9uIiwKIyBNRVRBICAgImxhbmd1YWdlX2dyb3VwIjogInN5bmFwc2VfcHlzcGFyayIKIyBNRVRBIH0KCiMgQ0VMTCAqKioqKioqKioqKioqKioqKioqKgoKZGVmIGR5bmFtaWNfY2FsbF9jbGVhbnNpbmdfZnVuY3Rpb24oZGY6IERhdGFGcmFtZSwKICAgICAgICBmdW5jX25hbWU6IHN0ciwgCiAgICAgICAgY29sdW1uczogc3RyLCAKICAgICAgICAqYXJncywgCiAgICAgICAgKiprd2FyZ3MpOgoKICAgIGZ1bmMgPSBnbG9iYWxzKCkuZ2V0KGZ1bmNfbmFtZSkKCiAgICBpZiBmdW5jOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIGZ1bmMoZGYsIGNvbHVtbnMsICphcmdzLCAqKmt3YXJncykKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZiJGdW5jdGlvbiAne2Z1bmNfbmFtZX0nIGZhaWxlZCB3aXRoIEVycm9yOiB7ZX0iKQogICAgZWxzZToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYiRnVuY3Rpb24gJ3tmdW5jX25hbWV9JyBub3QgZm91bmQiKQoKIyBNRVRBREFUQSAqKioqKioqKioqKioqKioqKioqKgoKIyBNRVRBIHsKIyBNRVRBICAgImxhbmd1YWdlIjogInB5dGhvbiIsCiMgTUVUQSAgICJsYW5ndWFnZV9ncm91cCI6ICJzeW5hcHNlX3B5c3BhcmsiCiMgTUVUQSB9CgojIENFTEwgKioqKioqKioqKioqKioqKioqKioKCmRlZiBoYW5kbGVfY2xlYW5zaW5nX2Z1bmN0aW9ucygKICAgICAgICBkZjogRGF0YUZyYW1lLAogICAgICAgIGNsZWFuc2luZ19ydWxlczoganNvbik6CgogICAgaWYgY2xlYW5zaW5nX3J1bGVzIGlzIG5vdCBOb25lOgogICAgICAgIGZvciBjbGVhbnNpbmdfcnVsZSBpbiBjbGVhbnNpbmdfcnVsZXM6CiAgICAgICAgICAgIGlmICdmdW5jdGlvbicgbm90IGluIGNsZWFuc2luZ19ydWxlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJmdW5jdGlvbiBkb2Vzbid0IGV4aXN0cyBpbjoge2NsZWFuc2luZ19ydWxlfSIpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiAncGFyYW1ldGVycycgbm90IGluIGNsZWFuc2luZ19ydWxlOgogICAgICAgICAgICAgICAgY2xlYW5zaW5nX3J1bGVbJ3BhcmFtZXRlcnMnXSA9IE5vbmUKICAgICAgICAgICAgaWYgJ2NvbHVtbnMnIG5vdCBpbiBjbGVhbnNpbmdfcnVsZToKICAgICAgICAgICAgICAgIGNsZWFuc2luZ19ydWxlWydjb2x1bW5zJ10gPSBOb25lCiAgICAgICAgICAgIAogICAgICAgICAgICBjb2x1bW5zID0gcmUuc3BsaXQoJzsnLCBjbGVhbnNpbmdfcnVsZVsnY29sdW1ucyddKQogICAgICAgICAgICBjb2x1bW5zID0gW2NvbHVtbi5zdHJpcCgpIGZvciBjb2x1bW4gaW4gY29sdW1ucyBpZiBjb2x1bW4gIT0gIiJdCgogICAgICAgICAgICBwcmludCAoZiJcblxuRnVuY3Rpb246IHtjbGVhbnNpbmdfcnVsZVsnZnVuY3Rpb24nXX1cblBhcmFtZXRlcnM6IHtjbGVhbnNpbmdfcnVsZVsncGFyYW1ldGVycyddfVxuQ29sdW1uczoge2NsZWFuc2luZ19ydWxlWydjb2x1bW5zJ119IikKICAgICAgICAgICAgZGYgPSBkeW5hbWljX2NhbGxfY2xlYW5zaW5nX2Z1bmN0aW9uKGRmLCBjbGVhbnNpbmdfcnVsZVsnZnVuY3Rpb24nXSwgY29sdW1ucywgY2xlYW5zaW5nX3J1bGVbJ3BhcmFtZXRlcnMnXSkKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiJDbGVhbnNpbmdPcHRpb25zIGRvZXNuJ3QgZXhpc3RzIGluOiB7Y2xlYW5zaW5nX3J1bGVzfSIpCiAgICByZXR1cm4gZGYKCiMgTUVUQURBVEEgKioqKioqKioqKioqKioqKioqKioKCiMgTUVUQSB7CiMgTUVUQSAgICJsYW5ndWFnZSI6ICJweXRob24iLAojIE1FVEEgICAibGFuZ3VhZ2VfZ3JvdXAiOiAic3luYXBzZV9weXNwYXJrIgojIE1FVEEgfQoKIyBNQVJLRE9XTiAqKioqKioqKioqKioqKioqKioqKgoKIyAjIENsZWFuc2luZyBmdW5jdGlvbnMKIyAKIyBEaWZmZXJlbnQgY2xlYW5zaW5nIGZ1bmN0aW9ucyBjYW4gYmUgZGVmaW5lZCBoZXJlLiBBZGQgeW91ciBvd24hCgojIENFTEwgKioqKioqKioqKioqKioqKioqKioKCmZyb20gcHlzcGFyay5zcWwuZnVuY3Rpb25zIGltcG9ydCBjb2wsIHVwcGVyLCBsb3dlcgoKZGVmIHRvX3VwcGVyKGRmLCBjb2x1bW5zLCBhcmdzKToKICAgICNwcmludChhcmdzWydwYXJhbTEnXSkKICAgIGZvciBjb2x1bW4gaW4gY29sdW1uczoKICAgICAgICBkZiA9IGRmLndpdGhDb2x1bW4oY29sdW1uLCB1cHBlcihjb2woY29sdW1uKSkpCiAgICByZXR1cm4gZGYKCmRlZiB0b19sb3dlcihkZiwgY29sdW1ucywgYXJncyk6CiAgICAjcHJpbnQoYXJnc1sncGFyYW0xJ10pCiAgICBmb3IgY29sdW1uIGluIGNvbHVtbnM6CiAgICAgICAgZGYgPSBkZi53aXRoQ29sdW1uKGNvbHVtbiwgbG93ZXIoY29sKGNvbHVtbikpKQogICAgcmV0dXJuIGRmCgojIE1FVEFEQVRBICoqKioqKioqKioqKioqKioqKioqCgojIE1FVEEgewojIE1FVEEgICAibGFuZ3VhZ2UiOiAicHl0aG9uIiwKIyBNRVRBICAgImxhbmd1YWdlX2dyb3VwIjogInN5bmFwc2VfcHlzcGFyayIKIyBNRVRBIH0KCiMgTUFSS0RPV04gKioqKioqKioqKioqKioqKioqKioKCiMgIyBFeGVjdXRpb24KCiMgQ0VMTCAqKioqKioqKioqKioqKioqKioqKgoKIyBhcHBseSBydWxlcyB0byBkYXRhZnJhbWUKZGZEYXRhQ2hhbmdlZCA9IGhhbmRsZV9jbGVhbnNpbmdfZnVuY3Rpb25zKGRmRGF0YUNoYW5nZWQsIGNsZWFuc2luZ19ydWxlcykKCiMgTUVUQURBVEEgKioqKioqKioqKioqKioqKioqKioKCiMgTUVUQSB7CiMgTUVUQSAgICJsYW5ndWFnZSI6ICJweXRob24iLAojIE1FVEEgICAibGFuZ3VhZ2VfZ3JvdXAiOiAic3luYXBzZV9weXNwYXJrIgojIE1FVEEgfQo=",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIk5vdGVib29rIiwKICAgICJkaXNwbGF5TmFtZSI6ICJOQl9GTURfRFFfQ0xFQU5TSU5HIiwKICAgICJkZXNjcmlwdGlvbiI6ICJOZXcgbm90ZWJvb2siCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgogIH0KfQ==",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "NB_FMD_DQ_CLEANSING",
            "type": "Notebook",
            "org_id": "0740d27f-3373-4302-aa9a-c402893b5a96",
            "description": "New notebook"
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfVE9PTElOR19QT1NUX0FTUUxfVE9fRk1EIgogIH0sCiAgImNvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMCIsCiAgICAibG9naWNhbElkIjogIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKICB9Cn0=",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_TOOLING_POST_ASQL_TO_FMD",
            "type": "DataPipeline",
            "org_id": "3886877b-c5bb-4cf3-9c75-b94e20cbc814",
            "description": ""
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "notebook-content.py",
                        "payload": "",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIk5vdGVib29rIiwKICAgICJkaXNwbGF5TmFtZSI6ICJOQl9GTURfUFJPQ0VTU0lOR19QQVJBTExFTF9NQUlOIiwKICAgICJkZXNjcmlwdGlvbiI6ICJNYWluIE5vdGVib29rIHRvIHN0YXJ0IHByb2Nlc3NlcyBmb3IgQnJvbnplIGFuZCBTaWx2ZXIiCiAgfSwKICAiY29uZmlnIjogewogICAgInZlcnNpb24iOiAiMi4wIiwKICAgICJsb2dpY2FsSWQiOiAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgogIH0KfQ==",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "NB_FMD_PROCESSING_PARALLEL_MAIN",
            "type": "Notebook",
            "org_id": "a130a279-5f6b-43bf-b8df-a101bf2101e2",
            "description": "Main Notebook to start processes for Bronze and Silver"
        },
        {
            "definition": {
                "parts": [
                    {
                        "path": "pipeline-content.json",
                        "payload": "ewogICJwcm9wZXJ0aWVzIjogewogICAgImFjdGl2aXRpZXMiOiBbCiAgICAgIHsKICAgICAgICAibmFtZSI6ICJGRV9FTlRJVFkiLAogICAgICAgICJ0eXBlIjogIkZvckVhY2giLAogICAgICAgICJkZXBlbmRzT24iOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhY3Rpdml0eSI6ICJMS19HRVRfRU5USVRJRVMiLAogICAgICAgICAgICAiZGVwZW5kZW5jeUNvbmRpdGlvbnMiOiBbCiAgICAgICAgICAgICAgIlN1Y2NlZWRlZCIKICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInR5cGVQcm9wZXJ0aWVzIjogewogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidmFsdWUiOiAiQGFjdGl2aXR5KCdMS19HRVRfRU5USVRJRVMnKS5vdXRwdXQudmFsdWUiLAogICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgfSwKICAgICAgICAgICJhY3Rpdml0aWVzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiQ1Bfc291cmNlX2RhdGFsYW5kaW5nem9uZSIsCiAgICAgICAgICAgICAgInR5cGUiOiAiQ29weSIsCiAgICAgICAgICAgICAgImRlcGVuZHNPbiI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImFjdGl2aXR5IjogIlNQX1NUQVJUX0FVRElUX1BJUEVMSU5FX0NQIiwKICAgICAgICAgICAgICAgICAgImRlcGVuZGVuY3lDb25kaXRpb25zIjogWwogICAgICAgICAgICAgICAgICAgICJTdWNjZWVkZWQiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwb2xpY3kiOiB7CiAgICAgICAgICAgICAgICAidGltZW91dCI6ICIwLjEyOjAwOjAwIiwKICAgICAgICAgICAgICAgICJyZXRyeSI6IDAsCiAgICAgICAgICAgICAgICAicmV0cnlJbnRlcnZhbEluU2Vjb25kcyI6IDMwLAogICAgICAgICAgICAgICAgInNlY3VyZU91dHB1dCI6IGZhbHNlLAogICAgICAgICAgICAgICAgInNlY3VyZUlucHV0IjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkJpbmFyeVNvdXJjZSIsCiAgICAgICAgICAgICAgICAgICJzdG9yZVNldHRpbmdzIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkxha2Vob3VzZVJlYWRTZXR0aW5ncyIsCiAgICAgICAgICAgICAgICAgICAgInJlY3Vyc2l2ZSI6IHRydWUKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgImZvcm1hdFNldHRpbmdzIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkJpbmFyeVJlYWRTZXR0aW5ncyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgImRhdGFzZXRTZXR0aW5ncyI6IHsKICAgICAgICAgICAgICAgICAgICAiYW5ub3RhdGlvbnMiOiBbXSwKICAgICAgICAgICAgICAgICAgICAibGlua2VkU2VydmljZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIkxIX0RBVEFfTEFORElOR1pPTkUiLAogICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhbm5vdGF0aW9ucyI6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJMYWtlaG91c2UiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZVByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIndvcmtzcGFjZUlkIjogIjQwZTI3ZmRjLTc3NWEtNGVlMi04NGQ1LTQ4ODkzYzkyZDdjYyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImFydGlmYWN0SWQiOiAiMDFiODMyZTMtMjc0Ni00ZTljLWIxNjktNTQwYjI3NDFhNjM4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicm9vdEZvbGRlciI6ICJGaWxlcyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiQmluYXJ5IiwKICAgICAgICAgICAgICAgICAgICAidHlwZVByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAibG9jYXRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkxha2Vob3VzZUxvY2F0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgImZpbGVOYW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAaXRlbSgpLlNvdXJjZU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJmb2xkZXJQYXRoIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAaXRlbSgpLlNvdXJjZVNjaGVtYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzaW5rIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJCaW5hcnlTaW5rIiwKICAgICAgICAgICAgICAgICAgInN0b3JlU2V0dGluZ3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiTGFrZWhvdXNlV3JpdGVTZXR0aW5ncyIsCiAgICAgICAgICAgICAgICAgICAgImNvcHlCZWhhdmlvciI6ICJQcmVzZXJ2ZUhpZXJhcmNoeSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgImRhdGFzZXRTZXR0aW5ncyI6IHsKICAgICAgICAgICAgICAgICAgICAiYW5ub3RhdGlvbnMiOiBbXSwKICAgICAgICAgICAgICAgICAgICAibGlua2VkU2VydmljZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjEzODhmMzBkXzUwNjJfNDhjM19hYTc2X2IwYzJiZGM1NDVmZCIsCiAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImFubm90YXRpb25zIjogW10sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkxha2Vob3VzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAid29ya3NwYWNlSWQiOiAiQGl0ZW0oKS5Xb3Jrc3BhY2VHdWlkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJ0aWZhY3RJZCI6ICJAaXRlbSgpLlRhcmdldExha2Vob3VzZUd1aWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJyb290Rm9sZGVyIjogIkZpbGVzIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJCaW5hcnkiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJsb2NhdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiTGFrZWhvdXNlTG9jYXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAiZmlsZU5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBpdGVtKCkuVGFyZ2V0RmlsZU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJmb2xkZXJQYXRoIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAaXRlbSgpLlRhcmdldEZpbGVQYXRoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImVuYWJsZVN0YWdpbmciOiBmYWxzZSwKICAgICAgICAgICAgICAgICJza2lwRXJyb3JGaWxlIjogewogICAgICAgICAgICAgICAgICAiZGF0YUluY29uc2lzdGVuY3kiOiBmYWxzZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ2YWxpZGF0ZURhdGFDb25zaXN0ZW5jeSI6IHRydWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJTUF9TVEFSVF9BVURJVF9QSVBFTElORV9DUCIsCiAgICAgICAgICAgICAgInR5cGUiOiAiU3FsU2VydmVyU3RvcmVkUHJvY2VkdXJlIiwKICAgICAgICAgICAgICAiZGVwZW5kc09uIjogW10sCiAgICAgICAgICAgICAgInBvbGljeSI6IHsKICAgICAgICAgICAgICAgICJ0aW1lb3V0IjogIjAuMTI6MDA6MDAiLAogICAgICAgICAgICAgICAgInJldHJ5IjogMCwKICAgICAgICAgICAgICAgICJyZXRyeUludGVydmFsSW5TZWNvbmRzIjogMzAsCiAgICAgICAgICAgICAgICAic2VjdXJlT3V0cHV0IjogZmFsc2UsCiAgICAgICAgICAgICAgICAic2VjdXJlSW5wdXQiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGVQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInN0b3JlZFByb2NlZHVyZU5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJbbG9nZ2luZ10uW3NwX0F1ZGl0UGlwZWxpbmVdIiwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAic3RvcmVkUHJvY2VkdXJlUGFyYW1ldGVycyI6IHsKICAgICAgICAgICAgICAgICAgIkxvZ0RhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogInsgXCJBY3Rpb25cIiA6IFwiU3RhcnRcIiB9IiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJMb2dUeXBlIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJTdGFydENvcHlBY3Rpdml0eSIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiU3RyaW5nIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiUGlwZWxpbmVHdWlkIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5QaXBlbGluZSIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR3VpZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlBpcGVsaW5lTmFtZSI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuUGlwZWxpbmVOYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJQaXBlbGluZVBhcmFtZXRlcnMiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBpdGVtKCkuU291cmNlTmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiU3RyaW5nIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiUGlwZWxpbmVQYXJlbnRSdW5HdWlkIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKT8uVHJpZ2dlcmVkQnlQaXBlbGluZVJ1bklkIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiUGlwZWxpbmVSdW5HdWlkIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5SdW5JZCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR3VpZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlRyaWdnZXJHdWlkIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5UcmlnZ2VySWQiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJUcmlnZ2VyVGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuVHJpZ2dlclRpbWUiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkRhdGVUaW1lIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiVHJpZ2dlclR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlRyaWdnZXJUeXBlIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJXb3Jrc3BhY2VHdWlkIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5EYXRhRmFjdG9yeSIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR3VpZCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImxpbmtlZFNlcnZpY2UiOiB7CiAgICAgICAgICAgICAgICAibmFtZSI6ICJXSF9MT0ciLAogICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICJhbm5vdGF0aW9ucyI6IFtdLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJEYXRhV2FyZWhvdXNlIiwKICAgICAgICAgICAgICAgICAgInR5cGVQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICJlbmRwb2ludCI6ICJAcGlwZWxpbmUoKS5wYXJhbWV0ZXJzLmxvZ193YXJlaG91c2VfZW5kcG9pbnQiLAogICAgICAgICAgICAgICAgICAgICJhcnRpZmFjdElkIjogIkBwaXBlbGluZSgpLnBhcmFtZXRlcnMubG9nX3dhcmVob3VzZV9ndWlkIiwKICAgICAgICAgICAgICAgICAgICAid29ya3NwYWNlSWQiOiAiQHBpcGVsaW5lKCkucGFyYW1ldGVycy5sb2dfd29ya3NwYWNlX2d1aWQiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJTUF9FTkRfQVVESVRfUElQRUxJTkVfQ1AiLAogICAgICAgICAgICAgICJ0eXBlIjogIlNxbFNlcnZlclN0b3JlZFByb2NlZHVyZSIsCiAgICAgICAgICAgICAgImRlcGVuZHNPbiI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImFjdGl2aXR5IjogIlNQX1VQREFURV9QUk9DRVNTIiwKICAgICAgICAgICAgICAgICAgImRlcGVuZGVuY3lDb25kaXRpb25zIjogWwogICAgICAgICAgICAgICAgICAgICJTdWNjZWVkZWQiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJhY3Rpdml0eSI6ICJTUF9VUERBVEVfTEFTVExPQURWQUxJRSIsCiAgICAgICAgICAgICAgICAgICJkZXBlbmRlbmN5Q29uZGl0aW9ucyI6IFsKICAgICAgICAgICAgICAgICAgICAiU3VjY2VlZGVkIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicG9saWN5IjogewogICAgICAgICAgICAgICAgInRpbWVvdXQiOiAiMC4xMjowMDowMCIsCiAgICAgICAgICAgICAgICAicmV0cnkiOiAwLAogICAgICAgICAgICAgICAgInJldHJ5SW50ZXJ2YWxJblNlY29uZHMiOiAzMCwKICAgICAgICAgICAgICAgICJzZWN1cmVPdXRwdXQiOiBmYWxzZSwKICAgICAgICAgICAgICAgICJzZWN1cmVJbnB1dCI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZVByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAic3RvcmVkUHJvY2VkdXJlTmFtZSI6IHsKICAgICAgICAgICAgICAgICAgInZhbHVlIjogIltsb2dnaW5nXS5bc3BfQXVkaXRQaXBlbGluZV0iLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdG9yZWRQcm9jZWR1cmVQYXJhbWV0ZXJzIjogewogICAgICAgICAgICAgICAgICAiTG9nRGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAieyAgICBcIkFjdGlvblwiIDogXCJFbmRcIiwgICAgXCJDb3B5T3V0cHV0XCIgOiBAe2FjdGl2aXR5KCdDUF9zb3VyY2VfZGF0YWxhbmRpbmd6b25lJykub3V0cHV0fSwgICAgfSIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiU3RyaW5nIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiTG9nVHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiRW5kQ29weUFjdGl2aXR5IiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJQaXBlbGluZUd1aWQiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlBpcGVsaW5lIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiUGlwZWxpbmVOYW1lIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5QaXBlbGluZU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlBpcGVsaW5lUGFyYW1ldGVycyI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQGl0ZW0oKS5Tb3VyY2VOYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJQaXBlbGluZVBhcmVudFJ1bkd1aWQiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpPy5UcmlnZ2VyZWRCeVBpcGVsaW5lUnVuSWQiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJQaXBlbGluZVJ1bkd1aWQiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlJ1bklkIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiVHJpZ2dlckd1aWQiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlRyaWdnZXJJZCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR3VpZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlRyaWdnZXJUaW1lIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5UcmlnZ2VyVGltZSIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRGF0ZVRpbWUiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJUcmlnZ2VyVHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuVHJpZ2dlclR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIldvcmtzcGFjZUd1aWQiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLkRhdGFGYWN0b3J5IiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAibGlua2VkU2VydmljZSI6IHsKICAgICAgICAgICAgICAgICJuYW1lIjogIldIX0xPRyIsCiAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgImFubm90YXRpb25zIjogW10sCiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkRhdGFXYXJlaG91c2UiLAogICAgICAgICAgICAgICAgICAidHlwZVByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImVuZHBvaW50IjogIkBwaXBlbGluZSgpLnBhcmFtZXRlcnMubG9nX3dhcmVob3VzZV9lbmRwb2ludCIsCiAgICAgICAgICAgICAgICAgICAgImFydGlmYWN0SWQiOiAiQHBpcGVsaW5lKCkucGFyYW1ldGVycy5sb2dfd2FyZWhvdXNlX2d1aWQiLAogICAgICAgICAgICAgICAgICAgICJ3b3Jrc3BhY2VJZCI6ICJAcGlwZWxpbmUoKS5wYXJhbWV0ZXJzLmxvZ193b3Jrc3BhY2VfZ3VpZCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogIlNQX0ZBSUxfQVVESVRfUElQRUxJTkVfQ1AiLAogICAgICAgICAgICAgICJ0eXBlIjogIlNxbFNlcnZlclN0b3JlZFByb2NlZHVyZSIsCiAgICAgICAgICAgICAgImRlcGVuZHNPbiI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImFjdGl2aXR5IjogIkNQX3NvdXJjZV9kYXRhbGFuZGluZ3pvbmUiLAogICAgICAgICAgICAgICAgICAiZGVwZW5kZW5jeUNvbmRpdGlvbnMiOiBbCiAgICAgICAgICAgICAgICAgICAgIkZhaWxlZCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInBvbGljeSI6IHsKICAgICAgICAgICAgICAgICJ0aW1lb3V0IjogIjAuMTI6MDA6MDAiLAogICAgICAgICAgICAgICAgInJldHJ5IjogMCwKICAgICAgICAgICAgICAgICJyZXRyeUludGVydmFsSW5TZWNvbmRzIjogMzAsCiAgICAgICAgICAgICAgICAic2VjdXJlT3V0cHV0IjogZmFsc2UsCiAgICAgICAgICAgICAgICAic2VjdXJlSW5wdXQiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGVQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInN0b3JlZFByb2NlZHVyZU5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJbbG9nZ2luZ10uW3NwX0F1ZGl0UGlwZWxpbmVdIiwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAic3RvcmVkUHJvY2VkdXJlUGFyYW1ldGVycyI6IHsKICAgICAgICAgICAgICAgICAgIkxvZ0RhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogInsgICAgXCJBY3Rpb25cIiA6IFwiRXJyb3JcIiwgICAgIFwiTWVzc2FnZVwiIDogQHthY3Rpdml0eSgnQ1Bfc291cmNlX2RhdGFsYW5kaW5nem9uZScpLmVycm9yfX0iLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIkxvZ1R5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkZhaWxDb3B5QWN0aXZpdHkiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlBpcGVsaW5lR3VpZCI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuUGlwZWxpbmUiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJQaXBlbGluZU5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlBpcGVsaW5lTmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiU3RyaW5nIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiUGlwZWxpbmVQYXJhbWV0ZXJzIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAaXRlbSgpLlNvdXJjZU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlBpcGVsaW5lUGFyZW50UnVuR3VpZCI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCk/LlRyaWdnZXJlZEJ5UGlwZWxpbmVSdW5JZCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR3VpZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlBpcGVsaW5lUnVuR3VpZCI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuUnVuSWQiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJUcmlnZ2VyR3VpZCI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuVHJpZ2dlcklkIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiVHJpZ2dlclRpbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlRyaWdnZXJUaW1lIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJEYXRlVGltZSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIlRyaWdnZXJUeXBlIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5UcmlnZ2VyVHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiU3RyaW5nIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiV29ya3NwYWNlR3VpZCI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuRGF0YUZhY3RvcnkiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJsaW5rZWRTZXJ2aWNlIjogewogICAgICAgICAgICAgICAgIm5hbWUiOiAiV0hfTE9HIiwKICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAiYW5ub3RhdGlvbnMiOiBbXSwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRGF0YVdhcmVob3VzZSIsCiAgICAgICAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAiZW5kcG9pbnQiOiAiQHBpcGVsaW5lKCkucGFyYW1ldGVycy5sb2dfd2FyZWhvdXNlX2VuZHBvaW50IiwKICAgICAgICAgICAgICAgICAgICAiYXJ0aWZhY3RJZCI6ICJAcGlwZWxpbmUoKS5wYXJhbWV0ZXJzLmxvZ193YXJlaG91c2VfZ3VpZCIsCiAgICAgICAgICAgICAgICAgICAgIndvcmtzcGFjZUlkIjogIkBwaXBlbGluZSgpLnBhcmFtZXRlcnMubG9nX3dvcmtzcGFjZV9ndWlkIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiU1BfVVBEQVRFX1BST0NFU1MiLAogICAgICAgICAgICAgICJ0eXBlIjogIlNxbFNlcnZlclN0b3JlZFByb2NlZHVyZSIsCiAgICAgICAgICAgICAgImRlcGVuZHNPbiI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImFjdGl2aXR5IjogIkNQX3NvdXJjZV9kYXRhbGFuZGluZ3pvbmUiLAogICAgICAgICAgICAgICAgICAiZGVwZW5kZW5jeUNvbmRpdGlvbnMiOiBbCiAgICAgICAgICAgICAgICAgICAgIlN1Y2NlZWRlZCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInBvbGljeSI6IHsKICAgICAgICAgICAgICAgICJ0aW1lb3V0IjogIjAuMTI6MDA6MDAiLAogICAgICAgICAgICAgICAgInJldHJ5IjogMSwKICAgICAgICAgICAgICAgICJyZXRyeUludGVydmFsSW5TZWNvbmRzIjogMzAsCiAgICAgICAgICAgICAgICAic2VjdXJlT3V0cHV0IjogZmFsc2UsCiAgICAgICAgICAgICAgICAic2VjdXJlSW5wdXQiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGVQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInN0b3JlZFByb2NlZHVyZU5hbWUiOiAiW2V4ZWN1dGlvbl0uW3NwX1Vwc2VydFBpcGVsaW5lTGFuZGluZ3pvbmVFbnRpdHldIiwKICAgICAgICAgICAgICAgICJzdG9yZWRQcm9jZWR1cmVQYXJhbWV0ZXJzIjogewogICAgICAgICAgICAgICAgICAiRmlsZW5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkBpdGVtKCkuVGFyZ2V0RmlsZU5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIkZpbGVQYXRoIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAaXRlbSgpLlRhcmdldEZpbGVQYXRoIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJJc1Byb2Nlc3NlZCI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiRmFsc2UiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkJvb2xlYW4iCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJMYW5kaW5nem9uZUVudGl0eUlkIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAaXRlbSgpLkVudGl0eUlkIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJJbnQ2NCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImNvbm5lY3Rpb25TZXR0aW5ncyI6IHsKICAgICAgICAgICAgICAgICJuYW1lIjogIlNRTF9GTURfRlJBTUVXT1JLIiwKICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAiYW5ub3RhdGlvbnMiOiBbXSwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRmFicmljU3FsRGF0YWJhc2UiLAogICAgICAgICAgICAgICAgICAidHlwZVByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgIndvcmtzcGFjZUlkIjogIjc3NzQ0NjliLTBjOTUtNDhiOS1iYzQyLWEzNmM4YzBlOGJjYSIsCiAgICAgICAgICAgICAgICAgICAgImFydGlmYWN0SWQiOiAiMDc1ZTU2NTYtNjEzZC00MWY0LTg5ZWQtNjNmNjgzN2MwZmY2IgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiZXh0ZXJuYWxSZWZlcmVuY2VzIjogewogICAgICAgICAgICAgICAgICAgICJjb25uZWN0aW9uIjogIjM3MjIzN2Y5LTcwOWEtNDhmOC04ZmIyLWNlMDY5NDBjOTkwZSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogIlNQX1VQREFURV9MQVNUTE9BRFZBTElFIiwKICAgICAgICAgICAgICAidHlwZSI6ICJTcWxTZXJ2ZXJTdG9yZWRQcm9jZWR1cmUiLAogICAgICAgICAgICAgICJkZXBlbmRzT24iOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJhY3Rpdml0eSI6ICJDUF9zb3VyY2VfZGF0YWxhbmRpbmd6b25lIiwKICAgICAgICAgICAgICAgICAgImRlcGVuZGVuY3lDb25kaXRpb25zIjogWwogICAgICAgICAgICAgICAgICAgICJTdWNjZWVkZWQiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwb2xpY3kiOiB7CiAgICAgICAgICAgICAgICAidGltZW91dCI6ICIwLjEyOjAwOjAwIiwKICAgICAgICAgICAgICAgICJyZXRyeSI6IDEsCiAgICAgICAgICAgICAgICAicmV0cnlJbnRlcnZhbEluU2Vjb25kcyI6IDMwLAogICAgICAgICAgICAgICAgInNlY3VyZU91dHB1dCI6IGZhbHNlLAogICAgICAgICAgICAgICAgInNlY3VyZUlucHV0IjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJzdG9yZWRQcm9jZWR1cmVOYW1lIjogIltleGVjdXRpb25dLltzcF9VcHNlcnRMYW5kaW5nWm9uZUVudGl0eUxhc3RMb2FkVmFsdWVdIiwKICAgICAgICAgICAgICAgICJzdG9yZWRQcm9jZWR1cmVQYXJhbWV0ZXJzIjogewogICAgICAgICAgICAgICAgICAiTGFuZGluZ3pvbmVFbnRpdHlJZCI6IHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQGl0ZW0oKS5FbnRpdHlJZCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiSW50NjQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJMYXN0TG9hZFZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAdXRjTm93KCkiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkRhdGV0aW1lIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiY29ubmVjdGlvblNldHRpbmdzIjogewogICAgICAgICAgICAgICAgIm5hbWUiOiAiU1FMX0ZNRF9GUkFNRVdPUksiLAogICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICJhbm5vdGF0aW9ucyI6IFtdLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJGYWJyaWNTcWxEYXRhYmFzZSIsCiAgICAgICAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAid29ya3NwYWNlSWQiOiAiNzc3NDQ2OWItMGM5NS00OGI5LWJjNDItYTM2YzhjMGU4YmNhIiwKICAgICAgICAgICAgICAgICAgICAiYXJ0aWZhY3RJZCI6ICIwNzVlNTY1Ni02MTNkLTQxZjQtODllZC02M2Y2ODM3YzBmZjYiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJleHRlcm5hbFJlZmVyZW5jZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImNvbm5lY3Rpb24iOiAiMzcyMjM3ZjktNzA5YS00OGY4LThmYjItY2UwNjk0MGM5OTBlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICB9LAogICAgICB7CiAgICAgICAgIm5hbWUiOiAiU1BfU1RBUlRfQVVESVRfUElQRUxJTkUiLAogICAgICAgICJ0eXBlIjogIlNxbFNlcnZlclN0b3JlZFByb2NlZHVyZSIsCiAgICAgICAgImRlcGVuZHNPbiI6IFtdLAogICAgICAgICJwb2xpY3kiOiB7CiAgICAgICAgICAidGltZW91dCI6ICIwLjEyOjAwOjAwIiwKICAgICAgICAgICJyZXRyeSI6IDAsCiAgICAgICAgICAicmV0cnlJbnRlcnZhbEluU2Vjb25kcyI6IDMwLAogICAgICAgICAgInNlY3VyZU91dHB1dCI6IGZhbHNlLAogICAgICAgICAgInNlY3VyZUlucHV0IjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICJzdG9yZWRQcm9jZWR1cmVOYW1lIjogewogICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkucGFyYW1ldGVycy5sb2dfc3RvcmVkcHJvY19uYW1lIiwKICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgIH0sCiAgICAgICAgICAic3RvcmVkUHJvY2VkdXJlUGFyYW1ldGVycyI6IHsKICAgICAgICAgICAgIkxvZ0RhdGEiOiB7CiAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogInsgXCJBY3Rpb25cIiA6IFwiU3RhcnRcIiB9IiwKICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJMb2dUeXBlIjogewogICAgICAgICAgICAgICJ2YWx1ZSI6ICJTdGFydFBpcGVsaW5lIiwKICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJQaXBlbGluZUd1aWQiOiB7CiAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlBpcGVsaW5lIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiUGlwZWxpbmVOYW1lIjogewogICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5QaXBlbGluZU5hbWUiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlBpcGVsaW5lUGFyYW1ldGVycyI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiBudWxsLAogICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlBpcGVsaW5lUGFyZW50UnVuR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCk/LlRyaWdnZXJlZEJ5UGlwZWxpbmVSdW5JZCIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiOiAiR3VpZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlBpcGVsaW5lUnVuR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuUnVuSWQiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJUcmlnZ2VyR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuVHJpZ2dlcklkIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiVHJpZ2dlclRpbWUiOiB7CiAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlRyaWdnZXJUaW1lIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJEYXRlVGltZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlRyaWdnZXJUeXBlIjogewogICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5UcmlnZ2VyVHlwZSIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiOiAiU3RyaW5nIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiV29ya3NwYWNlR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuRGF0YUZhY3RvcnkiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJsaW5rZWRTZXJ2aWNlIjogewogICAgICAgICAgIm5hbWUiOiAiNWMzOWI2YThfZGU4Ml80ZjUyX2E3YzZfMmQ4MjU0MzkxMzZiIiwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiYW5ub3RhdGlvbnMiOiBbXSwKICAgICAgICAgICAgInR5cGUiOiAiRGF0YVdhcmVob3VzZSIsCiAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAiZW5kcG9pbnQiOiAiQHBpcGVsaW5lKCkucGFyYW1ldGVycy5sb2dfd2FyZWhvdXNlX2VuZHBvaW50IiwKICAgICAgICAgICAgICAiYXJ0aWZhY3RJZCI6ICJAcGlwZWxpbmUoKS5wYXJhbWV0ZXJzLmxvZ193YXJlaG91c2VfZ3VpZCIsCiAgICAgICAgICAgICAgIndvcmtzcGFjZUlkIjogIkBwaXBlbGluZSgpLnBhcmFtZXRlcnMubG9nX3dvcmtzcGFjZV9ndWlkIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICB7CiAgICAgICAgIm5hbWUiOiAiU1BfRU5EX0FVRElUX1BJUEVMSU5FIiwKICAgICAgICAidHlwZSI6ICJTcWxTZXJ2ZXJTdG9yZWRQcm9jZWR1cmUiLAogICAgICAgICJkZXBlbmRzT24iOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhY3Rpdml0eSI6ICJGRV9FTlRJVFkiLAogICAgICAgICAgICAiZGVwZW5kZW5jeUNvbmRpdGlvbnMiOiBbCiAgICAgICAgICAgICAgIlN1Y2NlZWRlZCIKICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBvbGljeSI6IHsKICAgICAgICAgICJ0aW1lb3V0IjogIjAuMTI6MDA6MDAiLAogICAgICAgICAgInJldHJ5IjogMCwKICAgICAgICAgICJyZXRyeUludGVydmFsSW5TZWNvbmRzIjogMzAsCiAgICAgICAgICAic2VjdXJlT3V0cHV0IjogZmFsc2UsCiAgICAgICAgICAic2VjdXJlSW5wdXQiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInR5cGVQcm9wZXJ0aWVzIjogewogICAgICAgICAgInN0b3JlZFByb2NlZHVyZU5hbWUiOiB7CiAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5wYXJhbWV0ZXJzLmxvZ19zdG9yZWRwcm9jX25hbWUiLAogICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgfSwKICAgICAgICAgICJzdG9yZWRQcm9jZWR1cmVQYXJhbWV0ZXJzIjogewogICAgICAgICAgICAiTG9nRGF0YSI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAieyAgICBcIkFjdGlvblwiIDogXCJFbmRcIn0iLAogICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIkxvZ1R5cGUiOiB7CiAgICAgICAgICAgICAgInZhbHVlIjogIkVuZFBpcGVsaW5lIiwKICAgICAgICAgICAgICAidHlwZSI6ICJTdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJQaXBlbGluZUd1aWQiOiB7CiAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlBpcGVsaW5lIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiUGlwZWxpbmVOYW1lIjogewogICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5QaXBlbGluZU5hbWUiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlBpcGVsaW5lUGFyYW1ldGVycyI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiBudWxsLAogICAgICAgICAgICAgICJ0eXBlIjogIlN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlBpcGVsaW5lUGFyZW50UnVuR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCk/LlRyaWdnZXJlZEJ5UGlwZWxpbmVSdW5JZCIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiOiAiR3VpZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlBpcGVsaW5lUnVuR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuUnVuSWQiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJUcmlnZ2VyR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuVHJpZ2dlcklkIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJHdWlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiVHJpZ2dlclRpbWUiOiB7CiAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogIkBwaXBlbGluZSgpLlRyaWdnZXJUaW1lIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJEYXRlVGltZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIlRyaWdnZXJUeXBlIjogewogICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJAcGlwZWxpbmUoKS5UcmlnZ2VyVHlwZSIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJFeHByZXNzaW9uIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiOiAiU3RyaW5nIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiV29ya3NwYWNlR3VpZCI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAiQHBpcGVsaW5lKCkuRGF0YUZhY3RvcnkiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiRXhwcmVzc2lvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogIkd1aWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJsaW5rZWRTZXJ2aWNlIjogewogICAgICAgICAgIm5hbWUiOiAiV0hfTE9HIiwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiYW5ub3RhdGlvbnMiOiBbXSwKICAgICAgICAgICAgInR5cGUiOiAiRGF0YVdhcmVob3VzZSIsCiAgICAgICAgICAgICJ0eXBlUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAiZW5kcG9pbnQiOiAiQHBpcGVsaW5lKCkucGFyYW1ldGVycy5sb2dfd2FyZWhvdXNlX2VuZHBvaW50IiwKICAgICAgICAgICAgICAiYXJ0aWZhY3RJZCI6ICJAcGlwZWxpbmUoKS5wYXJhbWV0ZXJzLmxvZ193YXJlaG91c2VfZ3VpZCIsCiAgICAgICAgICAgICAgIndvcmtzcGFjZUlkIjogIkBwaXBlbGluZSgpLnBhcmFtZXRlcnMubG9nX3dvcmtzcGFjZV9ndWlkIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICB7CiAgICAgICAgIm5hbWUiOiAiTEtfR0VUX0VOVElUSUVTIiwKICAgICAgICAidHlwZSI6ICJMb29rdXAiLAogICAgICAgICJkZXBlbmRzT24iOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhY3Rpdml0eSI6ICJTUF9TVEFSVF9BVURJVF9QSVBFTElORSIsCiAgICAgICAgICAgICJkZXBlbmRlbmN5Q29uZGl0aW9ucyI6IFsKICAgICAgICAgICAgICAiU3VjY2VlZGVkIgogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicG9saWN5IjogewogICAgICAgICAgInRpbWVvdXQiOiAiMC4xMjowMDowMCIsCiAgICAgICAgICAicmV0cnkiOiAxLAogICAgICAgICAgInJldHJ5SW50ZXJ2YWxJblNlY29uZHMiOiAzMCwKICAgICAgICAgICJzZWN1cmVPdXRwdXQiOiBmYWxzZSwKICAgICAgICAgICJzZWN1cmVJbnB1dCI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAidHlwZVByb3BlcnRpZXMiOiB7CiAgICAgICAgICAic291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJGYWJyaWNTcWxEYXRhYmFzZVNvdXJjZSIsCiAgICAgICAgICAgICJzcWxSZWFkZXJRdWVyeSI6IHsKICAgICAgICAgICAgICAidmFsdWUiOiAiU0VMRUNUICogIEZST00gW2V4ZWN1dGlvbl0uW3Z3X0xvYWRTb3VyY2VUb0xhbmRpbmd6b25lXSAgd2hlcmUgRGF0YVNvdXJjZVR5cGU9J0B7cGlwZWxpbmUoKS5wYXJhbWV0ZXJzLkRhdGFTb3VyY2VUeXBlfSciLAogICAgICAgICAgICAgICJ0eXBlIjogIkV4cHJlc3Npb24iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJxdWVyeVRpbWVvdXQiOiAiMDI6MDA6MDAiLAogICAgICAgICAgICAicGFydGl0aW9uT3B0aW9uIjogIk5vbmUiCiAgICAgICAgICB9LAogICAgICAgICAgImZpcnN0Um93T25seSI6IGZhbHNlLAogICAgICAgICAgImRhdGFzZXRTZXR0aW5ncyI6IHsKICAgICAgICAgICAgImFubm90YXRpb25zIjogW10sCiAgICAgICAgICAgICJjb25uZWN0aW9uU2V0dGluZ3MiOiB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiU1FMX0ZNRF9GUkFNRVdPUksiLAogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgImFubm90YXRpb25zIjogW10sCiAgICAgICAgICAgICAgICAidHlwZSI6ICJGYWJyaWNTcWxEYXRhYmFzZSIsCiAgICAgICAgICAgICAgICAidHlwZVByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICJ3b3Jrc3BhY2VJZCI6ICI3Nzc0NDY5Yi0wYzk1LTQ4YjktYmM0Mi1hMzZjOGMwZThiY2EiLAogICAgICAgICAgICAgICAgICAiYXJ0aWZhY3RJZCI6ICIwNzVlNTY1Ni02MTNkLTQxZjQtODllZC02M2Y2ODM3YzBmZjYiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImV4dGVybmFsUmVmZXJlbmNlcyI6IHsKICAgICAgICAgICAgICAgICAgImNvbm5lY3Rpb24iOiAiMzcyMjM3ZjktNzA5YS00OGY4LThmYjItY2UwNjk0MGM5OTBlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInR5cGUiOiAiRmFicmljU3FsRGF0YWJhc2VUYWJsZSIsCiAgICAgICAgICAgICJzY2hlbWEiOiBbXSwKICAgICAgICAgICAgInR5cGVQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICJzY2hlbWEiOiAiZXhlY3V0aW9uIiwKICAgICAgICAgICAgICAidGFibGUiOiAidndfTG9hZFRvQnJvbnplTGF5ZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIF0sCiAgICAicGFyYW1ldGVycyI6IHsKICAgICAgImtleV92YXVsdF9uYW1lIjogewogICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgfSwKICAgICAgImxvZ193YXJlaG91c2VfZW5kcG9pbnQiOiB7CiAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICB9LAogICAgICAibG9nX3dhcmVob3VzZV9ndWlkIjogewogICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgfSwKICAgICAgImxvZ193b3Jrc3BhY2VfZ3VpZCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgIH0sCiAgICAgICJsb2dfc3RvcmVkcHJvY19uYW1lIjogewogICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgfSwKICAgICAgIkRhdGFTb3VyY2VUeXBlIjogewogICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgImRlZmF1bHRWYWx1ZSI6ICJPTkVMQUtFX0ZJTEVTXzAxIgogICAgICB9CiAgICB9CiAgfQp9",
                        "payloadType": "InlineBase64"
                    },
                    {
                        "path": ".platform",
                        "payload": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vanNvbi1zY2hlbWFzL2ZhYnJpYy9naXRJbnRlZ3JhdGlvbi9wbGF0Zm9ybVByb3BlcnRpZXMvMi4wLjAvc2NoZW1hLmpzb24iLAogICJtZXRhZGF0YSI6IHsKICAgICJ0eXBlIjogIkRhdGFQaXBlbGluZSIsCiAgICAiZGlzcGxheU5hbWUiOiAiUExfRk1EX0xEWl9DT1BZX0ZST01fT05FTEFLRV9GSUxFU18wMSIKICB9LAogICJjb25maWciOiB7CiAgICAidmVyc2lvbiI6ICIyLjAiLAogICAgImxvZ2ljYWxJZCI6ICIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiCiAgfQp9",
                        "payloadType": "InlineBase64"
                    }
                ]
            },
            "displayName": "PL_FMD_LDZ_COPY_FROM_ONELAKE_FILES_01",
            "type": "DataPipeline",
            "org_id": "9ce20843-70f0-42d2-8330-84f2c75dafe0",
            "description": ""
        }
    ]
}