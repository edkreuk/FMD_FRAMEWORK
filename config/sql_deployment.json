[
{
    "queries_logging": [
            "\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'logging')\n    BEGIN\n        EXEC('CREATE SCHEMA [logging];');\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'PipelineExecution' AND schema_id = SCHEMA_ID('logging'))\n    BEGIN\n                CREATE TABLE [logging].[PipelineExecution](\n                    [WorkspaceGuid] [uniqueidentifier] NULL,\n                    [PipelineRunGuid] [uniqueidentifier] NULL,\n                    [PipelineParentRunGuid] [uniqueidentifier] NULL,\n                    [PipelineGuid] [uniqueidentifier] NULL,\n                    [PipelineName] [varchar](100) NULL,\n                    [PipelineParameters] [varchar](8000) NULL,\n                    [EntityId] [int] NULL,\n                    [EntityLayer] [varchar](50) NULL,\n                    [TriggerType] [varchar](50) NULL,\n                    [TriggerGuid] [uniqueidentifier] NULL,\n                    [TriggerTime] [datetime2](6) NULL,\n                    [LogType] [varchar](50) NULL,\n                    [LogDateTime] [datetime2](6) NULL,\n                    [LogData] [varchar](8000) NULL\n                ) ON [PRIMARY]\n    END\n    ",
            "\n    CREATE OR ALTER PROCEDURE [logging].[sp_AuditPipeline]\n    @PipelineGuid UNIQUEIDENTIFIER = NULL\n    ,@PipelineName VARCHAR(100) = NULL\n    ,@PipelineRunGuid UNIQUEIDENTIFIER = NULL\n    ,@PipelineParentRunGuid UNIQUEIDENTIFIER = NULL\n    ,@PipelineParameters VARCHAR(8000) = NULL\n    ,@TriggerType VARCHAR(50) = NULL\n    ,@TriggerGuid UNIQUEIDENTIFIER = NULL\n    ,@TriggerTime datetime = NULL\n    ,@LogData VARCHAR(8000) = NULL\n    ,@LogType varchar(50) --Choice between Start/End/Fail, based on this Type the correct execution will be done\n    ,@WorkspaceGuid UNIQUEIDENTIFIER = NULL\n    ,@EntityId INT = NULL\n    ,@EntityLayer varchar(50) = NULL\nAS\n\n    INSERT INTO [logging].[PipelineExecution]\n           ([PipelineRunGuid]\n           ,[PipelineParentRunGuid]\n           ,[PipelineGuid]\n           ,[PipelineName]\n           ,[PipelineParameters]\n           ,[TriggerType]\n           ,[TriggerGuid]\n           ,[TriggerTime]\n           ,[LogDateTime]\n           ,[LogType]\n           ,[LogData]\n           ,[WorkspaceGuid]\n           ,[EntityId]\n           ,[EntityLayer]\n            )\n     VALUES (\n           @PipelineRunGuid,\n           @PipelineParentRunGuid,\n           @PipelineGuid,\n           @PipelineName,\n           @PipelineParameters,\n           @TriggerType,\n           @TriggerGuid,\n           @TriggerTime,\n           getdate(),\n           @LogType,\n           @LogData,\n           @WorkspaceGuid,\n           @EntityId,\n           @EntityLayer\n           )\n    "
        ],
        "queries_tables": [
            "\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'integration')\n    BEGIN\n        EXEC('CREATE SCHEMA [integration];');\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'execution')\n    BEGIN\n        EXEC('CREATE SCHEMA [execution];');\n    END\n    ",
            "\n    DECLARE @SQL NVARCHAR(MAX) = '';\n\n    SELECT @SQL = @SQL + 'ALTER TABLE ' + QUOTENAME(s.name) + '.' + QUOTENAME(t.name) + \n    ' DROP CONSTRAINT ' + QUOTENAME(dc.name) + ';' + CHAR(13)\n    FROM sys.default_constraints dc\n    INNER JOIN sys.tables t ON dc.parent_object_id = t.object_id\n    INNER JOIN sys.schemas s ON t.schema_id = s.schema_id\n    WHERE s.name IN ('integration', 'execution');\n\n    EXEC sp_executesql @SQL\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Connection' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Connection](\n            [ConnectionId] [int] IDENTITY(1,1) NOT NULL,\n            [ConnectionGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](200) NOT NULL,\n            [Type] [varchar](50) NOT NULL,\n            [GatewayType] [varchar](50) NULL,\n            [DatasourceReference] [varchar](max) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_ConnectionId')\n    BEGIN\n        ALTER TABLE [integration].[Connection] ADD  CONSTRAINT [PK_integration_ConnectionId] PRIMARY KEY CLUSTERED \n        (\n            [ConnectionId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Connection')\n    BEGIN\n        ALTER TABLE [integration].[Connection] ADD  CONSTRAINT [UC_integration_Connection] UNIQUE NONCLUSTERED \n        (\n            [ConnectionGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    ALTER TABLE [integration].[Connection] ADD  DEFAULT ((1)) FOR [IsActive] \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'DataSource' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[DataSource](\n            [DataSourceId] [int] IDENTITY(1,1) NOT NULL,\n            [ConnectionId] [int] NOT NULL,\n            [Name] [varchar](100) NOT NULL,\n            [Namespace] [varchar](100) NOT NULL,\n            [Type] [varchar](30) NULL,\n            [Description] [nvarchar](200) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_DataSource')\n    BEGIN\n        ALTER TABLE [integration].[DataSource] ADD  CONSTRAINT [PK_integration_DataSource] PRIMARY KEY CLUSTERED \n        (\n            [DataSourceId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_DataSource')\n    BEGIN\n        ALTER TABLE [integration].[DataSource] ADD  CONSTRAINT [UC_integration_DataSource] UNIQUE NONCLUSTERED \n        (\n            [ConnectionId] ASC,\n            [Name] ASC,\n            [Type] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[DataSource] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Workspace' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Workspace](\n            [WorkspaceId] [int] IDENTITY(1,1) NOT NULL,\n            [WorkspaceGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](100) NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_Workspace')\n    BEGIN\n        ALTER TABLE [integration].[Workspace] ADD  CONSTRAINT [PK_integration_Workspace] PRIMARY KEY CLUSTERED \n        (\n            [WorkspaceId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Workspace_WorkspaceGuid')\n    BEGIN\n        ALTER TABLE [integration].[Workspace] ADD  CONSTRAINT [UC_integration_Workspace_WorkspaceGuid] UNIQUE NONCLUSTERED \n        (\n            [WorkspaceGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Pipeline' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Pipeline](\n            [PipelineId] [int] IDENTITY(1,1) NOT NULL,\n            [PipelineGuid] [uniqueidentifier] NOT NULL,\n            [WorkspaceGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](200) NOT NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_PipelineId')\n    BEGIN\n        ALTER TABLE [integration].[Pipeline] ADD  CONSTRAINT [PK_integration_PipelineId] PRIMARY KEY CLUSTERED \n        (\n            [PipelineId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Pipeline')\n    BEGIN\n        ALTER TABLE [integration].[Pipeline] ADD  CONSTRAINT [UC_integration_Pipeline] UNIQUE NONCLUSTERED \n        (\n            [PipelineGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[Pipeline] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Lakehouse' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[Lakehouse](\n            [LakehouseId] [int] IDENTITY(1,1) NOT NULL,\n            [LakehouseGuid] [uniqueidentifier] NOT NULL,\n            [WorkspaceGuid] [uniqueidentifier] NOT NULL,\n            [Name] [varchar](100) NOT NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_Lakehouse')\n    BEGIN\n        ALTER TABLE [integration].[Lakehouse] ADD  CONSTRAINT [PK_integration_Lakehouse] PRIMARY KEY CLUSTERED \n        (\n            [LakehouseId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_Lakehouse')\n    BEGIN\n        ALTER TABLE [integration].[Lakehouse] ADD  CONSTRAINT [UC_integration_Lakehouse] UNIQUE NONCLUSTERED \n        (\n            [LakehouseGuid] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[Lakehouse] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'F' AND name = 'FK_Lakehouse_Workspace')\n    BEGIN\n        ALTER TABLE [integration].[Lakehouse]  WITH CHECK ADD  CONSTRAINT [FK_Lakehouse_Workspace] FOREIGN KEY([WorkspaceGuid])\n        REFERENCES [integration].[Workspace] ([WorkspaceGuid])\n    END\n    ",
            "\n        ALTER TABLE [integration].[Lakehouse] CHECK CONSTRAINT [FK_Lakehouse_Workspace]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'LandingzoneEntity' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[LandingzoneEntity](\n            [LandingzoneEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [DataSourceId] [int] NOT NULL,\n            [LakehouseId] [int] NOT NULL,\n            [SourceSchema] [nvarchar](100) NULL,\n            [SourceName] [nvarchar](200) NOT NULL,\n            [SourceCustomSelect] [nvarchar](4000) NULL,\n            [FileName] [nvarchar](200) NOT NULL,\n            [FileType] [nvarchar](20) NOT NULL,\n            [FilePath] [nvarchar](500) NOT NULL,\n            [IsIncremental] [bit] NOT NULL,\n            [IsIncrementalColumn] [nvarchar](50) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_LandingzoneEntity')\n    BEGIN\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  CONSTRAINT [PK_integration_LandingzoneEntity] PRIMARY KEY CLUSTERED \n        (\n            [LandingzoneEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_LandingzoneEntity')\n    BEGIN\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  CONSTRAINT [UC_integration_LandingzoneEntity] UNIQUE NONCLUSTERED \n        (\n            [SourceSchema] ASC,\n            [SourceName] ASC,\n            [DataSourceId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  DEFAULT ((0)) FOR [IsIncremental]\n    ",
            "\n        ALTER TABLE [integration].[LandingzoneEntity] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'BronzeLayerEntity' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[BronzeLayerEntity](\n            [BronzeLayerEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [LandingzoneEntityId] [bigint] NOT NULL,\n            [LakehouseId] [int] NOT NULL,\n            [Schema] [nvarchar](100) NOT NULL,\n            [Name] [nvarchar](200) NOT NULL,\n            [PrimaryKeys] [nvarchar](200) NOT NULL,\n            [FileType] [nvarchar](20) NOT NULL,\n            [CleansingRules] [nvarchar](max) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n    END \n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_BronzeLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  CONSTRAINT [PK_integration_BronzeLayerEntity] PRIMARY KEY CLUSTERED \n        (\n            [BronzeLayerEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_BronzeLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  CONSTRAINT [UC_integration_BronzeLayerEntity] UNIQUE NONCLUSTERED \n        (\n            [LakehouseId] ASC,\n            [Schema] ASC,\n            [Name] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  DEFAULT ('Delta') FOR [FileType]\n    ",
            "\n        ALTER TABLE [integration].[BronzeLayerEntity] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'F' AND name = 'FK_BronzeLayerEntity_LandingzoneEntity')\n    BEGIN\n        ALTER TABLE [integration].[BronzeLayerEntity]  WITH CHECK ADD  CONSTRAINT [FK_BronzeLayerEntity_LandingzoneEntity] FOREIGN KEY([LandingzoneEntityId])\n        REFERENCES [integration].[LandingzoneEntity] ([LandingzoneEntityId])\n    END\n    ",
            "\n        ALTER TABLE [integration].[BronzeLayerEntity] CHECK CONSTRAINT [FK_BronzeLayerEntity_LandingzoneEntity]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'SilverLayerEntity' AND schema_id = SCHEMA_ID('integration'))\n    BEGIN\n        CREATE TABLE [integration].[SilverLayerEntity](\n            [SilverLayerEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [BronzeLayerEntityId] [bigint] NOT NULL,\n            [LakehouseId] [int] NOT NULL,\n            [Schema] [nvarchar](100) NULL,\n            [Name] [nvarchar](200) NULL,\n            [FileType] [nvarchar](20) NOT NULL,\n            [CleansingRules] [nvarchar](max) NULL,\n            [IsActive] [bit] NOT NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_integration_SilverLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  CONSTRAINT [PK_integration_SilverLayerEntity] PRIMARY KEY CLUSTERED \n        (\n            [SilverLayerEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_integration_BSilverLayerEntity')\n    BEGIN\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  CONSTRAINT [UC_integration_BSilverLayerEntity] UNIQUE NONCLUSTERED \n        (\n            [LakehouseId] ASC,\n            [Schema] ASC,\n            [Name] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  DEFAULT ('Delta') FOR [FileType]\n    ",
            "\n        ALTER TABLE [integration].[SilverLayerEntity] ADD  DEFAULT ((1)) FOR [IsActive]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'F' AND name = 'FK_SilverLayerEntity_BronzeLayerEntityId')\n    BEGIN\n        ALTER TABLE [integration].[SilverLayerEntity]  WITH CHECK ADD  CONSTRAINT [FK_SilverLayerEntity_BronzeLayerEntityId] FOREIGN KEY([BronzeLayerEntityId])\n        REFERENCES [integration].[BronzeLayerEntity] ([BronzeLayerEntityId])\n    END\n    ",
            "\n        ALTER TABLE [integration].[SilverLayerEntity] CHECK CONSTRAINT [FK_SilverLayerEntity_BronzeLayerEntityId]\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'LandingzoneEntityLastLoadValue' AND schema_id = SCHEMA_ID('execution'))\n    BEGIN\n        CREATE TABLE [execution].[LandingzoneEntityLastLoadValue](\n            [LandingzoneEntityValueId] [bigint] IDENTITY(1,1) NOT NULL,\n            [LandingzoneEntityId] [bigint] NULL,\n            [LoadValue] [varchar](50) NULL,\n            [LastLoadDatetime] [datetime2](7) NULL\n        ) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_execution_Source_LastLoadValue')\n    BEGIN\n        ALTER TABLE [execution].[LandingzoneEntityLastLoadValue] ADD  CONSTRAINT [PK_execution_Source_LastLoadValue] PRIMARY KEY CLUSTERED \n        (\n            [LandingzoneEntityValueId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'UQ' AND name = 'UC_execution_LandingzoneEntityLastLoadValue_Guid')\n    BEGIN\n        ALTER TABLE [execution].[LandingzoneEntityLastLoadValue] ADD  CONSTRAINT [UC_execution_LandingzoneEntityLastLoadValue_Guid] UNIQUE NONCLUSTERED \n        (\n            [LandingzoneEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'PipelineLandingzoneEntity' AND schema_id = SCHEMA_ID('execution'))\n    BEGIN\n        CREATE TABLE [execution].[PipelineLandingzoneEntity](\n            [PipelineLandingzoneEntityId] [bigint] IDENTITY(1,1) NOT NULL,\n            [LandingzoneEntityId] [bigint] NOT NULL,\n            [FilePath] [nvarchar](300) NOT NULL,\n            [FileName] [nvarchar](max) NOT NULL,\n            [InsertDateTime] [datetime] NULL,\n            [IsProcessed] [bit] NOT NULL,\n            [LoadEndDateTime] [datetime] NULL\n        ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n    END\n    ",
            "\n    IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'PK' AND name = 'PK_execution_PipelineLandingzoneEntity')\n    BEGIN\n        ALTER TABLE [execution].[PipelineLandingzoneEntity] ADD  CONSTRAINT [PK_execution_PipelineLandingzoneEntity] PRIMARY KEY CLUSTERED \n        (\n            [PipelineLandingzoneEntityId] ASC\n        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    END\n    "
        ],
        "queries_views": [
            "\n    CREATE or ALTER   VIEW [execution].[vw_LoadSourceToLandingzone]\n    AS\n    SELECT \n    LZE.[LandingzoneEntityId] AS [EntityId],\n    DS.[DataSourceId] AS [DataSourceId],\n    DS.[Name] AS [DataSourceName],\n    DS.[Namespace] AS [DataSourceNamespace],\n    DS.[Type] AS [DataSourceType],\n    C.[Type] AS [ConnectionType],\n    C.[ConnectionGuid] AS [ConnectionGuid],\n    [SourceSchema],\n    [SourceName],\n    [FilePath] + '/' + DS.[Namespace] + FORMAT(GETUTCDATE(), '/yyyy/MM/dd') AS [TargetFilePath],\n    LZE.[FileName] + '_' + FORMAT(GETUTCDATE(), 'yyyyMMddHHmm') + '.' + [FileType] AS [TargetFileName],\n    LZE.[FileType] AS [TargetFileType],\n    LH.[LakehouseGuid] AS [TargetLakehouseGuid],\n    W.[WorkspaceGuid] AS [WorkspaceGuid],\n    [IsIncremental],\n    [IsIncrementalColumn],\n    [LastLoadValue] = CASE\n        WHEN C.[Type] IN ('SQL') THEN\n            'SELECT CASE WHEN ' + CONVERT(NVARCHAR(1), CASE WHEN LZE.[IsIncremental] = '' OR ISNULL(LZE.[IsIncrementalColumn], '') = '' THEN 0 ELSE LZE.[IsIncremental] END) + ' = 1 \n            THEN CONVERT(VARCHAR, MAX(' + (\n                CASE WHEN ISNULL(LZE.[IsIncrementalColumn], '') = '' THEN '1'\n                ELSE LZE.[IsIncrementalColumn]\n            END) + '), 120) \n            ELSE CONVERT(VARCHAR, GETDATE(), 120) \n            END AS [LastLoadValue] \n            FROM ' + QUOTENAME(ISNULL(\n                CASE WHEN LZE.[SourceSchema] != '' THEN LZE.[SourceSchema]\n                END, 'Unknown')) + '.' + QUOTENAME(LZE.[SourceName])\n        ELSE \n            LZELV.[LoadValue]\n    END,\n    [SourceDataRetrieval] = CASE \n        WHEN LZE.[IsIncremental] = 1 THEN \n            'SELECT * FROM ' + QUOTENAME(ISNULL(CASE WHEN LZE.[SourceSchema] != '' THEN LZE.[SourceSchema] END, 'Unknown')) + '.' + QUOTENAME(LZE.[SourceName]) + \n            CASE WHEN ISNULL(LZE.[IsIncrementalColumn], '') <> '' AND TRY_CONVERT(VARCHAR, [LoadValue]) IS NOT NULL THEN \n                ' WHERE ' + LZE.[IsIncrementalColumn] + ' >= ''' + TRY_CONVERT(VARCHAR, ISNULL([LoadValue], '1900-01-01')) + '''' \n            ELSE ''\n            END\n        WHEN ISNULL(LZE.[IsIncremental], 0) = 0 THEN \n            'SELECT * FROM ' + QUOTENAME(ISNULL(CASE WHEN LZE.[SourceSchema] != '' THEN LZE.[SourceSchema] END, 'Unknown')) + '.' + QUOTENAME(LZE.[SourceName]) \n        ELSE ''\n    END\nFROM [integration].[LandingzoneEntity] LZE\nINNER JOIN [integration].[Lakehouse] LH\n    ON LZE.[LakehouseId] = LH.[LakehouseId]\nINNER JOIN [integration].[Workspace] W\n    ON W.[WorkspaceGuid] = LH.[WorkspaceGuid]\nINNER JOIN [integration].[DataSource] DS\n    ON DS.[DataSourceId] = LZE.[DataSourceId]\nINNER JOIN [integration].[Connection] C\n    ON DS.[ConnectionId] = C.[ConnectionId]\nLEFT JOIN [execution].[LandingzoneEntityLastLoadValue] LZELV\n    ON LZELV.[LandingzoneEntityId] = LZE.[LandingzoneEntityId]\nWHERE 1 = 1\n    AND LZE.[IsActive] = 1\n",
            "\n\n    CREATE or ALTER   VIEW [execution].[vw_LoadToBronzeLayer]\n    AS\n   SELECT \n    BLE.[BronzeLayerEntityId] AS [EntityId], \n    PLZE.[FilePath] AS SourceFilePath,\n    PLZE.[FileName] AS SourceFileName,\n    LZE.[LandingzoneEntityId],\n    LZE.[FileType] AS SourceFileType,\n    BLE.[Schema] AS [TargetSchema],\n    BLE.[Name] AS [TargetName],\n    WT.[WorkspaceGuid] AS [TargetWorkspaceId],\n    WS.[WorkspaceGuid] AS [SourceWorkspaceId],\n    BLH.[LakehouseGuid] AS [TargetLakehouseId],\n    LZH.[LakehouseGuid] AS [SourceLakehouseId],\n    BLH.[Name] AS [TargetLakehouseName],\n    LZH.[Name] AS [SourceLakehouseName],\n    LZE.[IsIncremental],\n    BLE.[PrimaryKeys],\n    BLE.[CleansingRules],\n    DS.[Namespace] AS [DataSourceNamespace]\nFROM [integration].[BronzeLayerEntity] BLE\nINNER JOIN [integration].[LandingzoneEntity] LZE\n    ON LZE.[LandingzoneEntityId] = BLE.[LandingzoneEntityId]\nINNER JOIN [execution].[PipelineLandingzoneEntity] PLZE\n    ON LZE.[LandingzoneEntityId] = PLZE.[LandingzoneEntityId]\nINNER JOIN [execution].[LandingzoneEntityLastLoadValue] LZELV\n    ON LZE.[LandingzoneEntityId] = LZELV.[LandingzoneEntityId]\nINNER JOIN [integration].[DataSource] DS\n    ON DS.[DataSourceId] = LZE.[DataSourceId]\nINNER JOIN [integration].[Lakehouse] BLH\n    ON BLE.[LakehouseId] = BLH.[LakehouseId]\nINNER JOIN [integration].[Lakehouse] LZH\n    ON LZE.[LakehouseId] = LZH.[LakehouseId]\nINNER JOIN [integration].[Workspace] WT\n    ON WT.[WorkspaceGuid] = BLH.[WorkspaceGuid]\nINNER JOIN [integration].[Workspace] WS\n    ON WS.[WorkspaceGuid] = LZH.[WorkspaceGuid]\nWHERE 1 = 1\n    AND LZE.[IsActive] = 1\n    AND BLE.[IsActive] = 1\n    AND PLZE.[IsProcessed] = 0\n",
            "\n\n    CREATE or ALTER   VIEW [execution].[vw_LoadToSilverLayer]\n    AS\n   SELECT \n    LZE.[LandingzoneEntityId],\n    BLE.[BronzeLayerEntityId],\n    SLE.[SilverLayerEntityId] AS [EntityId],\n    SLE.[Schema] AS [SourceSchema],\n    SLE.[Name] AS [SourceName],\n    BLE.[FileType] AS [SourceFileType],\n    SLE.[Schema] AS [TargetSchema],\n    SLE.[Name] AS [TargetName],\n    SLE.[FileType] AS [TargetFileType],\n    WT.[WorkspaceGuid] AS [TargetWorkspaceId],\n    WS.[WorkspaceGuid] AS [SourceWorkspaceId],\n    SLH.[LakehouseGuid] AS [TargetLakehouseId],\n    BLH.[LakehouseGuid] AS [SourceLakehouseId],\n    SLH.[Name] AS [TargetLakehouseName],\n    BLH.[Name] AS [SourceLakehouseName],\n    SLE.[CleansingRules],\n    DS.[Namespace] AS [DataSourceNamespace]\nFROM [integration].[SilverLayerEntity] SLE\nINNER JOIN [integration].[BronzeLayerEntity] BLE\n    ON SLE.BronzeLayerEntityId = BLE.BronzeLayerEntityId\nINNER JOIN [integration].[LandingzoneEntity] LZE\n    ON LZE.LandingzoneEntityId = BLE.LandingzoneEntityId\nINNER JOIN [execution].[LandingzoneEntityLastLoadValue] LZELV\n    ON LZE.LandingzoneEntityId = LZELV.LandingzoneEntityId\nINNER JOIN [integration].[DataSource] DS\n    ON DS.[DataSourceId] = LZE.[DataSourceId]\nINNER JOIN [integration].[Lakehouse] BLH\n    ON BLE.LakehouseId = BLH.LakehouseId\nINNER JOIN [integration].[Lakehouse] SLH\n    ON SLE.LakehouseId = SLH.LakehouseId\nINNER JOIN [integration].[Workspace] WT\n    ON WT.[WorkspaceGuid] = SLH.[WorkspaceGuid]\nINNER JOIN [integration].[Workspace] WS\n    ON WS.[WorkspaceGuid] = BLH.[WorkspaceGuid]\nWHERE 1 = 1\n    AND LZE.IsActive = 1\n    AND BLE.IsActive = 1\n    AND SLE.IsActive = 1    \n"
        ],
        "queries_stored_procedures": [
            "\n\n    CREATE or ALTER  PROCEDURE [execution].[sp_UpsertLandingZoneEntityLastLoadValue] (\n        @LandingzoneEntityId BIGINT,\n        @LastLoadValue VARCHAR(50)\n        )\n        WITH EXECUTE AS CALLER\n    AS\n    BEGIN\n        SET NOCOUNT ON\n                                                                            \n        IF EXISTS (\n                SELECT 1\n                FROM [execution].[LandingzoneEntityLastLoadValue]\n                WHERE [LandingzoneEntityId] = @LandingzoneEntityId\n                )\n        BEGIN\n            UPDATE x\n            SET [LoadValue] = @LastLoadValue,\n                LastLoadDatetime = CONVERT(DATETIME2(7), GETDATE())\n            FROM [execution].[LandingzoneEntityLastLoadValue] x\n            WHERE [LandingzoneEntityId] = @LandingzoneEntityId\n        END                                     \n        ELSE\n        BEGIN\n            INSERT INTO [execution].[LandingzoneEntityLastLoadValue] (\n                [LandingzoneEntityId],\n                [LoadValue],\n                LastLoadDatetime\n                )\n            VALUES (                             \n                @LandingzoneEntityId,\n                @LastLoadValue,\n                getdate()\n                )\n        END\n    --Output for Fabric Pipeline\n    SELECT @LandingzoneEntityId AS LandingzoneEntityId, \n            @LastLoadValue as LastLoadValue;\n        SET NOCOUNT OFF;\n    END\n    \n",
            "\n\n    CREATE or ALTER  PROCEDURE [execution].[sp_UpsertPipelineLandingzoneEntity] (\n        @LandingzoneEntityId BIGINT,\n        @Filename NVARCHAR(300),\n        @FilePath NVARCHAR(300),\n        @IsProcessed BIT\n    )\n    WITH EXECUTE AS CALLER\n    AS\n    BEGIN\n        SET NOCOUNT ON;\n\n        IF NOT EXISTS (\n            SELECT 1\n            FROM [execution].[PipelineLandingzoneEntity] PLE\n            WHERE PLE.[LandingzoneEntityId] = @LandingzoneEntityId\n                AND PLE.[Filename] = @Filename\n                AND PLE.[FilePath] = @FilePath\n        )\n        BEGIN\n            INSERT INTO [execution].[PipelineLandingzoneEntity] (\n                [LandingzoneEntityId],\n                [FilePath],\n                [FileName],\n                [InsertDateTime],\n                [IsProcessed]\n            )\n            SELECT @LandingzoneEntityId,\n                @FilePath,\n                @Filename,\n                GETDATE(),\n                @IsProcessed;\n        END\n        ELSE IF @IsProcessed = 1\n        BEGIN\n            UPDATE [execution].[PipelineLandingzoneEntity]\n            SET [IsProcessed] = @IsProcessed,\n                [LoadEndDateTime] = GETDATE()\n            WHERE [LandingzoneEntityId] = @LandingzoneEntityId\n                AND [Filename] = @Filename\n                AND [FilePath] = @FilePath;\n        END\n\n        -- Output for Fabric Pipeline\n        SELECT @LandingzoneEntityId AS LandingzoneEntityId, \n            @IsProcessed as IsProcessed,\n            @FilePath as FilePath,\n            @Filename as [Filename];\n\n        SET NOCOUNT OFF;\n    END\n    \n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetBronzeLayerEntity](\n         @LandingzoneEntityId int\n       \n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @BronzeLayerEntityId int\n    BEGIN\n     set @BronzeLayerEntityId = ( select isnull(BronzeLayerEntityId,0) as BronzeLayerEntityId from   [integration].[BronzeLayerEntity] where LandingzoneEntityId= @LandingzoneEntityId)\n    END\n\n            SELECT @BronzeLayerEntityId AS BronzeLayerEntityId\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetDataSource](\n       @Name NVARCHAR(100)\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @DataSourceId int\n    BEGIN\n            set @DataSourceId= ( select isnull(DataSourceId,0) as DataSourceId  from   [integration].[DataSource] where  [Name] = @Name)\n    END\n\n            SELECT @DataSourceId AS DataSourceId\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetLakehouse](\n         @WorkspaceGuid UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100)\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @LakehouseId int\n    BEGIN\n        set @LakehouseId= ( select LakehouseId from   [integration].[Lakehouse] where  [Name] = @Name and  [WorkspaceGuid] = @WorkspaceGuid)\n    END\n\n            SELECT @LakehouseId AS LakehouseId\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetLandingzoneEntity](\n         @LakehouseId int\n        ,@SourceSchema NVARCHAR(100)\n        ,@SourceName NVARCHAR(200)\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @LandingzoneEntityId int\n    BEGIN\n          set @LandingzoneEntityId = ( select isnull(LandingzoneEntityId,0) as LandingzoneEntityId  from   [integration].[LandingzoneEntity] where  [SourceName] = @SourceName and  [SourceSchema] = @SourceSchema and [LakehouseId] = @LakehouseId)\n    END\n\n            SELECT @LandingzoneEntityId AS LandingzoneEntityId\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_GetSilverLayerEntity](\n         @BronzeLayerEntityId int\n       \n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @SilverLayerEntityId int\n    BEGIN\n        set @SilverLayerEntityId = ( select  isnull(SilverLayerEntityId,0) as SilverLayerEntityId from   [integration].[SilverLayerEntity] where BronzeLayerEntityId= @BronzeLayerEntityId)\n    END\n\n            SELECT @SilverLayerEntityId AS SilverLayerEntityId\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_UpsertBronzeLayerEntity](\n        @BronzeLayerEntityId INT = 0\n        ,@LandingzoneEntityId INT\n        ,@Schema NVARCHAR(100) \n        ,@Name NVARCHAR(200)\n        ,@FileType NVARCHAR(20) = 'Delta'\n        ,@LakehouseId INT\n        ,@PrimaryKeys NVARCHAR(200)\n        ,@IsActive BIT = 1)\n    WITH EXECUTE AS CALLER\n    AS \n\n    BEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @OutputTable TABLE (BronzeLayerEntityId INT);\n\n    IF NOT EXISTS(SELECT 1\n                  FROM [integration].[BronzeLayerEntity]\n                  WHERE [BronzeLayerEntityId] = @BronzeLayerEntityId)\n    BEGIN\n        INSERT INTO [integration].[BronzeLayerEntity]\n            ([LandingzoneEntityId]\n            ,[IsActive]\n            ,[Schema]\n            ,[Name]\n            ,[FileType]\n            ,[LakehouseId]\n            ,[PrimaryKeys])\n        OUTPUT INSERTED.[BronzeLayerEntityId] INTO @OutputTable\n        VALUES (@LandingzoneEntityId\n            ,@IsActive\n            ,@Schema\n            ,@Name\n            ,@FileType\n            ,@LakehouseId\n            ,@PrimaryKeys);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[BronzeLayerEntity]\n        SET [LandingzoneEntityId] = @LandingzoneEntityId\n            ,[IsActive] = @IsActive\n            ,[Schema] = @Schema\n            ,[Name] = @Name\n            ,[FileType] = @FileType\n            ,[LakehouseId] = @LakehouseId\n            ,[PrimaryKeys] = @PrimaryKeys\n        OUTPUT INSERTED.[BronzeLayerEntityId] INTO @OutputTable\n        WHERE [BronzeLayerEntityId] = @BronzeLayerEntityId;\n    END\n\n    SELECT BronzeLayerEntityId FROM @OutputTable;\nEND\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_UpsertConnection](\n        @ConnectionGuid UNIQUEIDENTIFIER\n        ,@Name nvarchar(200) \n        ,@Type nvarchar(50) \n        ,@IsActive bit \n\n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Connection]\n                WHERE [ConnectionGuid] = @ConnectionGuid)\n    BEGIN\n        INSERT INTO [integration].[Connection]\n            ([ConnectionGuid]\n            ,[Name]\n            ,[Type]\n            ,[IsActive]\n    )\n        VALUES (\n            @ConnectionGuid\n            ,@Name\n            ,@Type\n            ,@IsActive\n    );\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[Connection]\n        SET [Name] = @Name\n            ,[Type] = @Type\n            ,[IsActive] = @IsActive\n            WHERE [ConnectionGuid] = @ConnectionGuid  \n    END\n    \n",
            "\n    CREATE or ALTER PROCEDURE [integration].[sp_UpsertDataSource](\n        @ConnectionId INT \n        ,@DataSourceId INT = 0\n        ,@Name NVARCHAR(100)\n        ,@Namespace VARCHAR(10)\n        ,@Type VARCHAR(30)\n        ,@Description NVARCHAR(200)\n        ,@IsActive BIT = 1\n    )\n    WITH EXECUTE AS CALLER\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @InternalConnectionId BIGINT;\n    DECLARE @OutputTable TABLE (DataSourceId INT);\n\n    SET @InternalConnectionId = (SELECT [C].[ConnectionId]\n                                 FROM [integration].[Connection] [C]\n                                 WHERE [C].ConnectionId = @ConnectionId);\n\n    IF NOT EXISTS (SELECT 1\n                   FROM [integration].[DataSource]\n                   WHERE [DataSourceId] = @DataSourceId)\n    BEGIN\n        INSERT INTO [integration].[DataSource]\n            ([Name]\n            ,[Namespace]\n            ,[ConnectionId]\n            ,[Type]\n            ,[Description]\n            ,[IsActive])\n        OUTPUT INSERTED.[DataSourceId] INTO @OutputTable\n        VALUES (@Name\n            ,@Namespace\n            ,@InternalConnectionId\n            ,@Type\n            ,@Description\n            ,@IsActive);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[DataSource]\n        SET [Name] = @Name\n            ,[ConnectionId] = @InternalConnectionId\n            ,[Namespace] = @Namespace\n            ,[Type] = @Type\n            ,[Description] = @Description\n            ,[IsActive] = @IsActive\n        OUTPUT INSERTED.[DataSourceId] INTO @OutputTable\n        WHERE [DataSourceId] = @DataSourceId;\n    END\n\n    SELECT DataSourceId FROM @OutputTable;\nEND\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_UpsertLakehouse](\n        @LakehouseId UNIQUEIDENTIFIER\n        ,@WorkspaceId UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100) \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Lakehouse]\n                WHERE [LakehouseGuid] = @LakehouseId)\n    BEGIN\n        INSERT INTO [integration].[Lakehouse]\n            ([Name]\n            ,[LakehouseGuid]\n            ,[WorkspaceGuid])\n        VALUES (@Name\n            ,@LakehouseId\n            ,@WorkspaceId);\n\n    END\n    ELSE\n    BEGIN\n\n        UPDATE [integration].[Lakehouse]\n        SET [Name] = @Name,\n            [WorkspaceGuid] = @WorkspaceId\n        WHERE [LakehouseGuid] = @LakehouseId\n    END\n    \n",
            "\n    CREATE or ALTER PROCEDURE [integration].[sp_UpsertLandingzoneEntity](\n        @LandingzoneEntityId INT = 0\n        ,@DataSourceId INT\n        ,@LakehouseId INT\n        ,@SourceSchema NVARCHAR(100)\n        ,@SourceName NVARCHAR(200)\n\t\t,@SourceCustomSelect NVARCHAR(4000)\n        ,@FileName NVARCHAR(200)\n        ,@FilePath NVARCHAR(100)\n        ,@FileType NVARCHAR(20)\n        ,@IsIncremental bit\n        ,@IsIncrementalColumn NVARCHAR(50) = NULL\n        ,@IsActive BIT = 1\n    )\nWITH EXECUTE AS CALLER\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @OutputTable TABLE (LandingzoneEntityId INT);\n\n    IF NOT EXISTS(SELECT 1\n                  FROM [integration].[LandingzoneEntity]\n                  WHERE [LandingzoneEntityId] = @LandingzoneEntityId)\n    BEGIN\n        INSERT INTO [integration].[LandingzoneEntity]\n            ([DataSourceId]\n            ,[IsActive]\n            ,[SourceSchema]\n            ,[SourceName]\n\t\t\t,[SourceCustomSelect]\n            ,[FileName]\n            ,[FileType]\n            ,[FilePath]\n            ,[LakehouseId]\n            ,[IsIncremental]\n            ,[IsIncrementalColumn])\n        OUTPUT INSERTED.[LandingzoneEntityId] INTO @OutputTable\n        VALUES (@DataSourceId\n            ,@IsActive\n            ,@SourceSchema\n            ,@SourceName\n\t\t\t,@SourceCustomSelect\n            ,@FileName\n            ,@FileType\n            ,@FilePath\n            ,@LakehouseId\n            ,@IsIncremental\n            ,@IsIncrementalColumn);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[LandingzoneEntity]\n        SET [DataSourceId] = @DataSourceId\n            ,[IsActive] = @IsActive\n            ,[SourceSchema] = @SourceSchema\n            ,[SourceName] = @SourceName\n\t\t\t,[SourceCustomSelect] = @SourceCustomSelect\n            ,[FileName] = @FileName\n            ,[FileType] = @FileType\n            ,[FilePath] = @FilePath\n            ,[LakehouseId] = @LakehouseId\n            ,[IsIncremental] = @IsIncremental\n            ,[IsIncrementalColumn] = @IsIncrementalColumn\n        OUTPUT INSERTED.[LandingzoneEntityId] INTO @OutputTable\n        WHERE [LandingzoneEntityId] = @LandingzoneEntityId;\n    END\n\n    SELECT LandingzoneEntityId FROM @OutputTable;\nEND\n\n\n",
            "\n    CREATE or ALTER   PROCEDURE [integration].[sp_UpsertPipeline](\n        @PipelineId UNIQUEIDENTIFIER\n        ,@WorkspaceId UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100) \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Pipeline]\n                WHERE [PipelineGuid] = @PipelineId)\n    BEGIN\n        INSERT INTO [integration].[Pipeline]\n            ([Name]\n            ,[PipelineGuid]\n            ,[WorkspaceGuid])\n        VALUES (@Name\n            ,@PipelineId\n            ,@WorkspaceId);\n\n    END\n    ELSE\n    BEGIN\n\n        UPDATE [integration].[Pipeline]\n        SET [Name] = @Name,\n            [WorkspaceGuid] = @WorkspaceId\n        WHERE [PipelineGuid] = @PipelineId\n    END\n    \n",
            "\n    CREATE or ALTER PROCEDURE [integration].[sp_UpsertSilverLayerEntity](\n         @SilverLayerEntityId INT = 0 \n        ,@BronzeLayerEntityId INT\n        ,@LakehouseId INT\n        ,@Name NVARCHAR(200)\n        ,@Schema NVARCHAR(100)\n        ,@FileType NVARCHAR(20) = 'Delta'\n        ,@IsActive BIT = 1)\n\nWITH EXECUTE AS CALLER\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @OutputTable TABLE (SilverLayerEntityId INT);\n\n    IF NOT EXISTS(SELECT 1\n                  FROM [integration].[SilverLayerEntity]\n                  WHERE [SilverLayerEntityId] = @SilverLayerEntityId)\n    BEGIN\n        INSERT INTO [integration].[SilverLayerEntity]\n            ([BronzeLayerEntityId]\n            ,[IsActive]\n            ,[Schema]\n            ,[Name]\n            ,[FileType]\n            ,[LakehouseId])\n        OUTPUT INSERTED.[SilverLayerEntityId] INTO @OutputTable\n        VALUES (@BronzeLayerEntityId\n            ,@IsActive\n            ,@Schema\n            ,@Name\n            ,@FileType\n            ,@LakehouseId);\n    END\n    ELSE\n    BEGIN\n        UPDATE [integration].[SilverLayerEntity]\n        SET [BronzeLayerEntityId] = @BronzeLayerEntityId\n            ,[Schema] = @Schema\n            ,[Name] = @Name\n            ,[FileType] = @FileType\n            ,[LakehouseId] = @LakehouseId\n            ,[IsActive] = @IsActive\n        OUTPUT INSERTED.[SilverLayerEntityId] INTO @OutputTable\n        WHERE [SilverLayerEntityId] = @SilverLayerEntityId;\n    END\n\n    SELECT SilverLayerEntityId FROM @OutputTable;\nEND\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_UpsertWorkspace](\n        @WorkspaceId UNIQUEIDENTIFIER\n        ,@Name NVARCHAR(100) \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    IF NOT EXISTS(SELECT  1\n                FROM [integration].[Workspace]\n                WHERE [WorkspaceGuid] = @WorkspaceId)\n    BEGIN\n        INSERT INTO [integration].[Workspace]\n            ([Name]\n            ,[WorkspaceGuid])\n        VALUES (@Name\n            ,@WorkspaceId);\n\n    END\n    ELSE\n    BEGIN\n\n        UPDATE [integration].[Workspace]\n        SET [Name] = @Name\n        WHERE [WorkspaceGuid] = @WorkspaceId\n    END\n\n",
            "\n    CREATE or ALTER  PROCEDURE [integration].[sp_GetConnection](\n       @ConnectionGuid uniqueidentifier\n    \n    )\n    WITH EXECUTE AS CALLER\n    AS \n\n    SET NOCOUNT ON; \n\n    declare @ConnectionId int\n    BEGIN\n        set @ConnectionId= ( select isnull(ConnectionId,0) as ConnectionId  from   [integration].[Connection] where [ConnectionGuid] = @ConnectionGuid)\n    END\n\n            SELECT @ConnectionId AS ConnectionId\n",
            "\n    CREATE or ALTER PROCEDURE [execution].[sp_GetBronzelayerEntity] \n\tWITH EXECUTE AS CALLER\nAS\nBEGIN\n\tSET NOCOUNT ON;\t\n    \n\tSELECT CONCAT('[', \n        STRING_AGG(CONCAT(CONVERT(NVARCHAR(MAX),'{\"path\": \"NB_FMD_LOAD_LANDING_BRONZE\", \"params\":{\"SourceFilePath\": ')  , '\"' , REPLACE(REPLACE([SourceFilePath],'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceFileName\" : ', '\"', REPLACE(REPLACE([SourceFileName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"TargetSchema\"   : ', '\"', REPLACE(REPLACE([TargetSchema], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"TargetName\"     : ', '\"', REPLACE(REPLACE([TargetName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"PrimaryKeys\"    : ', '\"', REPLACE(REPLACE([PrimaryKeys], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"SourceFileType\" : ', '\"', REPLACE(REPLACE([SourceFileType], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"IsIncremental\"  : ', '\"', CASE WHEN [IsIncremental] = 1 THEN 'True' ELSE 'False' END, '\"',\n        ',\"TargetLakehouse\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [TargetLakehouseId])), '\"',\n        ',\"SourceLakehouse\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [SourceLakehouseId])), '\"',\n        ',\"TargetWorkspace\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [TargetWorkspaceId])), '\"',\n        ',\"SourceWorkspace\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [SourceWorkspaceId])), '\"',\n        ',\"TargetLakehouseName\" : ', '\"', REPLACE(REPLACE([TargetLakehouseName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"SourceLakehouseName\" : ', '\"', REPLACE(REPLACE([SourceLakehouseName], '\\', '\\'), '\"', '\"'), '\"',\n        ',\"LandingzoneEntityId\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [LandingzoneEntityId])), '\"',\n        ',\"BronzeLayerEntityId\" : ', '\"', LOWER(CONVERT(NVARCHAR(36), [EntityId])), '\"',\n\t\t',\"DataSourceNamespace\" : ' , '\"' ,  LOWER(convert(NVARCHAR(20), [DataSourceNamespace])) , '\"' ,\n        ',\"cleansing_rules\" : ', '\"', REPLACE(REPLACE([CleansingRules], '\\', '\\'), '\"', '\"'), '\"', \n        '}}'),', ') WITHIN GROUP (ORDER BY [EntityId])\n        ,']') AS NotebookParams\n         FROM (SELECT TOP 100 PERCENT * FROM [execution].[vw_LoadToBronzeLayer]  ORDER BY [SourceFileName] ASC) AS [vw_LoadToBronzeLayer]\n               \nEND\n",
            "\n\nCREATE or ALTER PROCEDURE [execution].[sp_GetSilverlayerEntity] \n\tWITH EXECUTE AS CALLER\nAS\nBEGIN\n\tSET NOCOUNT ON;\t\n    \nSELECT CONCAT('[',\n    STRING_AGG(\n        CONCAT(CONVERT(NVARCHAR(MAX),'{\"path\": \"NB_FMD_LOAD_BRONZE_SILVER\", \"params\": {\n        \"SourceSchema\": ') , '\"' , REPLACE(REPLACE(SourceSchema,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceName\": ' , '\"' , REPLACE(REPLACE(SourceName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"TargetSchema\": ' , '\"' , REPLACE(REPLACE(TargetSchema,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"TargetName\": ' , '\"' , REPLACE(REPLACE(TargetName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceFileType\": ' , '\"' , REPLACE(REPLACE(SourceFileType,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"TargetLakehouse\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), TargetLakehouseId)) , '\"' ,\n        ',\"SourceLakehouse\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), SourceLakehouseId)) , '\"' ,\n        ',\"TargetWorkspace\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), TargetWorkspaceId)) , '\"' ,\n        ',\"SourceWorkspace\": ' , '\"' , LOWER(CONVERT(NVARCHAR(36), SourceWorkspaceId)) , '\"' ,\n        ',\"TargetLakehouseName\": ' , '\"' , REPLACE(REPLACE(TargetLakehouseName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SourceLakehouseName\": ' , '\"' , REPLACE(REPLACE(SourceLakehouseName,'\\', '\\'), '\"', '\"') , '\"' ,\n        ',\"SilverLayerEntityId\": ' , '\"' ,  LOWER(CONVERT(NVARCHAR(36),EntityId)) , '\"' ,\n        ',\"DataSourceNamespace\" : ' , '\"' ,  LOWER(convert(NVARCHAR(30), [DataSourceNamespace])) , '\"' ,\n         ',\"cleansing_rules\" : ', '\"', REPLACE(REPLACE([CleansingRules],'\\', '\\'), '\"', '\"'), '\"',\n              '}}' )\n    , ',') WITHIN GROUP (ORDER BY EntityId)\n    ,']') AS NotebookParams\nFROM [execution].[vw_LoadToSilverLayer]\n             \nEND\n"
        ]
    }
]
